//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Z:\RTDC\core\src\main\java\rtdc\core\json\JSONWriter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "JSONException.h"
#include "JSONObject.h"
#include "JSONWriter.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/Long.h"

@implementation RtdcCoreJsonJSONWriter

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)w {
  if (self = [super init]) {
    self->comma_ = NO;
    self->mode_ = 'i';
    RtdcCoreJsonJSONWriter_setAndConsume_stack_(self, [IOSCharArray newArrayWithLength:RtdcCoreJsonJSONWriter_maxdepth]);
    self->top_ = 0;
    RtdcCoreJsonJSONWriter_set_writer_(self, w);
  }
  return self;
}

- (RtdcCoreJsonJSONWriter *)appendWithNSString:(NSString *)s {
  if (s == nil) {
    @throw [[[RtdcCoreJsonJSONException alloc] initWithNSString:@"Null pointer"] autorelease];
  }
  if (self->mode_ == 'o' || self->mode_ == 'a') {
    @try {
      if (self->comma_ && self->mode_ == 'a') {
        [((JavaIoWriter *) nil_chk(self->writer_)) writeWithInt:','];
      }
      [((JavaIoWriter *) nil_chk(self->writer_)) writeWithNSString:s];
    }
    @catch (JavaIoIOException *e) {
      @throw [[[RtdcCoreJsonJSONException alloc] initWithJavaLangThrowable:e] autorelease];
    }
    if (self->mode_ == 'o') {
      self->mode_ = 'k';
    }
    self->comma_ = YES;
    return self;
  }
  @throw [[[RtdcCoreJsonJSONException alloc] initWithNSString:@"Value out of sequence."] autorelease];
}

- (RtdcCoreJsonJSONWriter *)array {
  if (self->mode_ == 'i' || self->mode_ == 'o' || self->mode_ == 'a') {
    [self pushWithChar:'a'];
    [self appendWithNSString:@"["];
    self->comma_ = NO;
    return self;
  }
  @throw [[[RtdcCoreJsonJSONException alloc] initWithNSString:@"Misplaced array."] autorelease];
}

- (RtdcCoreJsonJSONWriter *)endWithChar:(jchar)m
                               withChar:(jchar)c {
  if (self->mode_ != m) {
    @throw [[[RtdcCoreJsonJSONException alloc] initWithNSString:m == 'o' ? @"Misplaced endObject." : @"Misplaced endArray."] autorelease];
  }
  [self popWithChar:m];
  @try {
    [((JavaIoWriter *) nil_chk(self->writer_)) writeWithInt:c];
  }
  @catch (JavaIoIOException *e) {
    @throw [[[RtdcCoreJsonJSONException alloc] initWithJavaLangThrowable:e] autorelease];
  }
  self->comma_ = YES;
  return self;
}

- (RtdcCoreJsonJSONWriter *)endArray {
  return [self endWithChar:'a' withChar:']'];
}

- (RtdcCoreJsonJSONWriter *)endObject {
  return [self endWithChar:'k' withChar:'}'];
}

- (RtdcCoreJsonJSONWriter *)keyWithNSString:(NSString *)s {
  if (s == nil) {
    @throw [[[RtdcCoreJsonJSONException alloc] initWithNSString:@"Null key."] autorelease];
  }
  if (self->mode_ == 'k') {
    @try {
      if (self->comma_) {
        [((JavaIoWriter *) nil_chk(self->writer_)) writeWithInt:','];
      }
      [((JavaIoWriter *) nil_chk(self->writer_)) writeWithNSString:RtdcCoreJsonJSONObject_quoteWithNSString_(s)];
      [self->writer_ writeWithInt:':'];
      self->comma_ = NO;
      self->mode_ = 'o';
      return self;
    }
    @catch (JavaIoIOException *e) {
      @throw [[[RtdcCoreJsonJSONException alloc] initWithJavaLangThrowable:e] autorelease];
    }
  }
  @throw [[[RtdcCoreJsonJSONException alloc] initWithNSString:@"Misplaced key."] autorelease];
}

- (RtdcCoreJsonJSONWriter *)object {
  if (self->mode_ == 'i') {
    self->mode_ = 'o';
  }
  if (self->mode_ == 'o' || self->mode_ == 'a') {
    [self appendWithNSString:@"{"];
    [self pushWithChar:'k'];
    self->comma_ = NO;
    return self;
  }
  @throw [[[RtdcCoreJsonJSONException alloc] initWithNSString:@"Misplaced object."] autorelease];
}

- (void)popWithChar:(jchar)c {
  if (self->top_ <= 0 || IOSCharArray_Get(nil_chk(self->stack_), self->top_ - 1) != c) {
    @throw [[[RtdcCoreJsonJSONException alloc] initWithNSString:@"Nesting error."] autorelease];
  }
  self->top_ -= 1;
  self->mode_ = self->top_ == 0 ? 'd' : IOSCharArray_Get(nil_chk(self->stack_), self->top_ - 1);
}

- (void)pushWithChar:(jchar)c {
  if (self->top_ >= RtdcCoreJsonJSONWriter_maxdepth) {
    @throw [[[RtdcCoreJsonJSONException alloc] initWithNSString:@"Nesting too deep."] autorelease];
  }
  *IOSCharArray_GetRef(nil_chk(self->stack_), self->top_) = c;
  self->mode_ = c;
  self->top_ += 1;
}

- (RtdcCoreJsonJSONWriter *)valueWithBoolean:(jboolean)b {
  return [self appendWithNSString:b ? @"true" : @"false"];
}

- (RtdcCoreJsonJSONWriter *)valueWithLong:(jlong)l {
  return [self appendWithNSString:JavaLangLong_toStringWithLong_(l)];
}

- (RtdcCoreJsonJSONWriter *)valueWithId:(id)o {
  return [self appendWithNSString:RtdcCoreJsonJSONObject_valueToStringWithId_(o)];
}

- (void)dealloc {
  RtdcCoreJsonJSONWriter_set_stack_(self, nil);
  RtdcCoreJsonJSONWriter_set_writer_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(RtdcCoreJsonJSONWriter *)other {
  [super copyAllFieldsTo:other];
  other->comma_ = comma_;
  other->mode_ = mode_;
  RtdcCoreJsonJSONWriter_set_stack_(other, stack_);
  other->top_ = top_;
  RtdcCoreJsonJSONWriter_set_writer_(other, writer_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoWriter:", "JSONWriter", NULL, 0x1, NULL },
    { "appendWithNSString:", "append", "Lrtdc.core.json.JSONWriter;", 0x2, "Lrtdc.core.json.JSONException;" },
    { "array", NULL, "Lrtdc.core.json.JSONWriter;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "endWithChar:withChar:", "end", "Lrtdc.core.json.JSONWriter;", 0x2, "Lrtdc.core.json.JSONException;" },
    { "endArray", NULL, "Lrtdc.core.json.JSONWriter;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "endObject", NULL, "Lrtdc.core.json.JSONWriter;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "keyWithNSString:", "key", "Lrtdc.core.json.JSONWriter;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "object", NULL, "Lrtdc.core.json.JSONWriter;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "popWithChar:", "pop", "V", 0x2, "Lrtdc.core.json.JSONException;" },
    { "pushWithChar:", "push", "V", 0x2, "Lrtdc.core.json.JSONException;" },
    { "valueWithBoolean:", "value", "Lrtdc.core.json.JSONWriter;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "valueWithLong:", "value", "Lrtdc.core.json.JSONWriter;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "valueWithId:", "value", "Lrtdc.core.json.JSONWriter;", 0x1, "Lrtdc.core.json.JSONException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "maxdepth_", NULL, 0x1a, "I", NULL, .constantValue.asInt = RtdcCoreJsonJSONWriter_maxdepth },
    { "comma_", NULL, 0x2, "Z", NULL,  },
    { "mode_", NULL, 0x4, "C", NULL,  },
    { "stack_", NULL, 0x2, "[C", NULL,  },
    { "top_", NULL, 0x2, "I", NULL,  },
    { "writer_", NULL, 0x4, "Ljava.io.Writer;", NULL,  },
  };
  static const J2ObjcClassInfo _RtdcCoreJsonJSONWriter = { "JSONWriter", "rtdc.core.json", NULL, 0x1, 13, methods, 6, fields, 0, NULL};
  return &_RtdcCoreJsonJSONWriter;
}

@end

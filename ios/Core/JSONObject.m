//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nicolasmenard/IdeaProjects/RTDC/core/src/main/java/rtdc/core/json/JSONObject.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JSONArray.h"
#include "JSONException.h"
#include "JSONObject.h"
#include "JSONString.h"
#include "JSONTokener.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuffer.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Vector.h"

@interface JsonJSONObject () {
 @public
  JavaUtilHashMap *myHashMap_;
}

@end

J2OBJC_FIELD_SETTER(JsonJSONObject, myHashMap_, JavaUtilHashMap *)

@interface JsonJSONObject_Null : NSObject

- (id)clone;

- (jboolean)isEqual:(id)object;

- (NSString *)description;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JsonJSONObject_Null)

__attribute__((unused)) static void JsonJSONObject_Null_init(JsonJSONObject_Null *self);

__attribute__((unused)) static JsonJSONObject_Null *new_JsonJSONObject_Null_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(JsonJSONObject_Null)

J2OBJC_INITIALIZED_DEFN(JsonJSONObject)

JavaLangBoolean *JsonJSONObject_TRUE__;
JavaLangBoolean *JsonJSONObject_FALSE__;
id JsonJSONObject_NULL__;

@implementation JsonJSONObject

+ (JavaLangBoolean *)TRUE_ {
  return JsonJSONObject_TRUE__;
}

+ (JavaLangBoolean *)FALSE_ {
  return JsonJSONObject_FALSE__;
}

+ (id)NULL_ {
  return JsonJSONObject_NULL__;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JsonJSONObject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJsonJSONTokener:(JsonJSONTokener *)x {
  JsonJSONObject_initWithJsonJSONTokener_(self, x);
  return self;
}

- (instancetype)initWithNSString:(NSString *)string {
  JsonJSONObject_initWithNSString_(self, string);
  return self;
}

- (JsonJSONObject *)accumulateWithNSString:(NSString *)key
                                    withId:(id)value {
  JsonJSONObject_testValidityWithId_(value);
  id o = [self optWithNSString:key];
  if (o == nil) {
    (void) [self putWithNSString:key withId:value];
  }
  else if ([o isKindOfClass:[JsonJSONArray class]]) {
    (void) [((JsonJSONArray *) check_class_cast(o, [JsonJSONArray class])) putWithId:value];
  }
  else {
    (void) [self putWithNSString:key withId:[((JsonJSONArray *) nil_chk([new_JsonJSONArray_init() putWithId:o])) putWithId:value]];
  }
  return self;
}

- (id)getWithNSString:(NSString *)key {
  id o = [self optWithNSString:key];
  if (o == nil) {
    @throw new_JsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", JsonJSONObject_quoteWithNSString_(key), @"] not found."));
  }
  return o;
}

- (jboolean)getBooleanWithNSString:(NSString *)key {
  id o = [self getWithNSString:key];
  if ([nil_chk(o) isEqual:JsonJSONObject_FALSE__] || ([o isKindOfClass:[NSString class]] && [((NSString *) nil_chk([((NSString *) check_class_cast(o, [NSString class])) lowercaseString])) isEqual:@"false"])) {
    return false;
  }
  else if ([o isEqual:JsonJSONObject_TRUE__] || ([o isKindOfClass:[NSString class]] && [((NSString *) nil_chk([((NSString *) check_class_cast(o, [NSString class])) lowercaseString])) isEqual:@"true"])) {
    return true;
  }
  @throw new_JsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", JsonJSONObject_quoteWithNSString_(key), @"] is not a Boolean."));
}

- (jint)getIntWithNSString:(NSString *)key {
  id o = [self getWithNSString:key];
  if ([o isKindOfClass:[JavaLangByte class]]) {
    return [((JavaLangByte *) nil_chk(((JavaLangByte *) check_class_cast(o, [JavaLangByte class])))) charValue];
  }
  else if ([o isKindOfClass:[JavaLangShort class]]) {
    return [((JavaLangShort *) nil_chk(((JavaLangShort *) check_class_cast(o, [JavaLangShort class])))) shortValue];
  }
  else if ([o isKindOfClass:[JavaLangInteger class]]) {
    return [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(o, [JavaLangInteger class])))) intValue];
  }
  else if ([o isKindOfClass:[JavaLangLong class]]) {
    return (jint) [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast(o, [JavaLangLong class])))) longLongValue];
  }
  @throw new_JsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", JsonJSONObject_quoteWithNSString_(key), @"] is not a number."));
}

- (JsonJSONArray *)getJSONArrayWithNSString:(NSString *)key {
  id o = [self getWithNSString:key];
  if ([o isKindOfClass:[JsonJSONArray class]]) {
    return (JsonJSONArray *) check_class_cast(o, [JsonJSONArray class]);
  }
  @throw new_JsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", JsonJSONObject_quoteWithNSString_(key), @"] is not a JSONArray."));
}

- (JsonJSONObject *)getJSONObjectWithNSString:(NSString *)key {
  id o = [self getWithNSString:key];
  if ([o isKindOfClass:[JsonJSONObject class]]) {
    return (JsonJSONObject *) check_class_cast(o, [JsonJSONObject class]);
  }
  @throw new_JsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", JsonJSONObject_quoteWithNSString_(key), @"] is not a JSONObject."));
}

- (jlong)getLongWithNSString:(NSString *)key {
  id o = [self getWithNSString:key];
  if ([o isKindOfClass:[JavaLangByte class]]) {
    return [((JavaLangByte *) nil_chk(((JavaLangByte *) check_class_cast(o, [JavaLangByte class])))) charValue];
  }
  else if ([o isKindOfClass:[JavaLangShort class]]) {
    return [((JavaLangShort *) nil_chk(((JavaLangShort *) check_class_cast(o, [JavaLangShort class])))) shortValue];
  }
  else if ([o isKindOfClass:[JavaLangInteger class]]) {
    return [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(o, [JavaLangInteger class])))) intValue];
  }
  else if ([o isKindOfClass:[JavaLangLong class]]) {
    return [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast(o, [JavaLangLong class])))) longLongValue];
  }
  @throw new_JsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", JsonJSONObject_quoteWithNSString_(key), @"] is not a number."));
}

- (NSString *)getStringWithNSString:(NSString *)key {
  return [nil_chk([self getWithNSString:key]) description];
}

- (jboolean)hasWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) nil_chk(self->myHashMap_)) containsKeyWithId:key];
}

- (jboolean)isNullWithNSString:(NSString *)key {
  return [nil_chk(JsonJSONObject_NULL__) isEqual:[self optWithNSString:key]];
}

- (id<JavaUtilSet>)keySet {
  return [((JavaUtilHashMap *) nil_chk(self->myHashMap_)) keySet];
}

- (id<JavaUtilMap>)map {
  return self->myHashMap_;
}

- (jint)length {
  return [((JavaUtilHashMap *) nil_chk(self->myHashMap_)) size];
}

- (JsonJSONArray *)names {
  JsonJSONArray *ja = new_JsonJSONArray_init();
  for (NSString * __strong key in nil_chk([self keySet])) (void) [ja putWithId:key];
  return [ja length] == 0 ? nil : ja;
}

+ (NSString *)trimNumberWithNSString:(NSString *)s {
  return JsonJSONObject_trimNumberWithNSString_(s);
}

+ (NSString *)numberToStringWithId:(id)n {
  return JsonJSONObject_numberToStringWithId_(n);
}

- (id)optWithNSString:(NSString *)key {
  return key == nil ? nil : [((JavaUtilHashMap *) nil_chk(self->myHashMap_)) getWithId:key];
}

- (jboolean)optBooleanWithNSString:(NSString *)key {
  return [self optBooleanWithNSString:key withBoolean:false];
}

- (jboolean)optBooleanWithNSString:(NSString *)key
                       withBoolean:(jboolean)defaultValue {
  @try {
    return [self getBooleanWithNSString:key];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (JsonJSONObject *)putWithNSString:(NSString *)key
                 withJavaUtilVector:(JavaUtilVector *)value {
  (void) [self putWithNSString:key withId:new_JsonJSONArray_initWithJavaUtilVector_(value)];
  return self;
}

- (jint)optIntWithNSString:(NSString *)key {
  return [self optIntWithNSString:key withInt:0];
}

- (jint)optIntWithNSString:(NSString *)key
                   withInt:(jint)defaultValue {
  @try {
    return [self getIntWithNSString:key];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (JsonJSONArray *)optJSONArrayWithNSString:(NSString *)key {
  id o = [self optWithNSString:key];
  return [o isKindOfClass:[JsonJSONArray class]] ? (JsonJSONArray *) check_class_cast(o, [JsonJSONArray class]) : nil;
}

- (JsonJSONObject *)optJSONObjectWithNSString:(NSString *)key {
  id o = [self optWithNSString:key];
  return [o isKindOfClass:[JsonJSONObject class]] ? (JsonJSONObject *) check_class_cast(o, [JsonJSONObject class]) : nil;
}

- (jlong)optLongWithNSString:(NSString *)key {
  return [self optLongWithNSString:key withLong:0];
}

- (jlong)optLongWithNSString:(NSString *)key
                    withLong:(jlong)defaultValue {
  @try {
    return [self getLongWithNSString:key];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (NSString *)optStringWithNSString:(NSString *)key {
  return [self optStringWithNSString:key withNSString:@""];
}

- (NSString *)optStringWithNSString:(NSString *)key
                       withNSString:(NSString *)defaultValue {
  id o = [self optWithNSString:key];
  return o != nil ? [o description] : defaultValue;
}

- (JsonJSONObject *)putWithNSString:(NSString *)key
                        withBoolean:(jboolean)value {
  (void) [self putWithNSString:key withId:value ? JsonJSONObject_TRUE__ : JsonJSONObject_FALSE__];
  return self;
}

- (JsonJSONObject *)putWithNSString:(NSString *)key
                            withInt:(jint)value {
  (void) [self putWithNSString:key withId:new_JavaLangInteger_initWithInt_(value)];
  return self;
}

- (JsonJSONObject *)putWithNSString:(NSString *)key
                           withLong:(jlong)value {
  (void) [self putWithNSString:key withId:new_JavaLangLong_initWithLong_(value)];
  return self;
}

- (JsonJSONObject *)putWithNSString:(NSString *)key
                             withId:(id)value {
  if (key == nil) {
    @throw new_JsonJSONException_initWithNSString_(@"Null key.");
  }
  if (value != nil) {
    JsonJSONObject_testValidityWithId_(value);
    (void) [((JavaUtilHashMap *) nil_chk(self->myHashMap_)) putWithId:key withId:value];
  }
  else {
    (void) [self removeWithNSString:key];
  }
  return self;
}

- (JsonJSONObject *)putOptWithNSString:(NSString *)key
                                withId:(id)value {
  if (key != nil && value != nil) {
    (void) [self putWithNSString:key withId:value];
  }
  return self;
}

+ (NSString *)quoteWithNSString:(NSString *)string {
  return JsonJSONObject_quoteWithNSString_(string);
}

- (id)removeWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) nil_chk(self->myHashMap_)) removeWithId:key];
}

+ (void)testValidityWithId:(id)o {
  JsonJSONObject_testValidityWithId_(o);
}

- (JsonJSONArray *)toJSONArrayWithJsonJSONArray:(JsonJSONArray *)names {
  if (names == nil || [names length] == 0) {
    return nil;
  }
  JsonJSONArray *ja = new_JsonJSONArray_init();
  for (jint i = 0; i < [((JsonJSONArray *) nil_chk(names)) length]; i += 1) {
    (void) [ja putWithId:[self optWithNSString:[names getStringWithInt:i]]];
  }
  return ja;
}

- (NSString *)description {
  @try {
    JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithNSString_(@"{");
    for (NSString * __strong key in nil_chk([self keySet])) {
      if ([sb length] > 1) (void) [sb appendWithChar:','];
      (void) [sb appendWithNSString:JsonJSONObject_quoteWithNSString_(key)];
      (void) [sb appendWithChar:':'];
      (void) [sb appendWithNSString:JsonJSONObject_valueToStringWithId_([((JavaUtilHashMap *) nil_chk(self->myHashMap_)) getWithId:key])];
    }
    (void) [sb appendWithChar:'}'];
    return [sb description];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (NSString *)toStringWithInt:(jint)indentFactor {
  return [self toStringWithInt:indentFactor withInt:0];
}

- (NSString *)toStringWithInt:(jint)indentFactor
                      withInt:(jint)indent {
  jint i;
  jint n = [self length];
  if (n == 0) {
    return @"{}";
  }
  id<JavaUtilIterator> keys = [((id<JavaUtilSet>) nil_chk([self keySet])) iterator];
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithNSString_(@"{");
  jint newindent = indent + indentFactor;
  id o;
  if (n == 1) {
    o = [((id<JavaUtilIterator>) nil_chk(keys)) next];
    (void) [sb appendWithNSString:JsonJSONObject_quoteWithNSString_([nil_chk(o) description])];
    (void) [sb appendWithNSString:@": "];
    (void) [sb appendWithNSString:JsonJSONObject_valueToStringWithId_withInt_withInt_([((JavaUtilHashMap *) nil_chk(self->myHashMap_)) getWithId:o], indentFactor, indent)];
  }
  else {
    while ([((id<JavaUtilIterator>) nil_chk(keys)) hasNext]) {
      o = [keys next];
      if ([sb length] > 1) {
        (void) [sb appendWithNSString:@",\n"];
      }
      else {
        (void) [sb appendWithChar:0x000a];
      }
      for (i = 0; i < newindent; i += 1) {
        (void) [sb appendWithChar:' '];
      }
      (void) [sb appendWithNSString:JsonJSONObject_quoteWithNSString_([nil_chk(o) description])];
      (void) [sb appendWithNSString:@": "];
      (void) [sb appendWithNSString:JsonJSONObject_valueToStringWithId_withInt_withInt_([((JavaUtilHashMap *) nil_chk(self->myHashMap_)) getWithId:o], indentFactor, newindent)];
    }
    if ([sb length] > 1) {
      (void) [sb appendWithChar:0x000a];
      for (i = 0; i < indent; i += 1) {
        (void) [sb appendWithChar:' '];
      }
    }
  }
  (void) [sb appendWithChar:'}'];
  return [sb description];
}

+ (NSString *)valueToStringWithId:(id)value {
  return JsonJSONObject_valueToStringWithId_(value);
}

+ (NSString *)valueToStringWithId:(id)value
                          withInt:(jint)indentFactor
                          withInt:(jint)indent {
  return JsonJSONObject_valueToStringWithId_withInt_withInt_(value, indentFactor, indent);
}

+ (void)initialize {
  if (self == [JsonJSONObject class]) {
    JsonJSONObject_TRUE__ = new_JavaLangBoolean_initWithBoolean_(true);
    JsonJSONObject_FALSE__ = new_JavaLangBoolean_initWithBoolean_(false);
    JsonJSONObject_NULL__ = new_JsonJSONObject_Null_init();
    J2OBJC_SET_INITIALIZED(JsonJSONObject)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JSONObject", NULL, 0x1, NULL, NULL },
    { "initWithJsonJSONTokener:", "JSONObject", NULL, 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "initWithNSString:", "JSONObject", NULL, 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "accumulateWithNSString:withId:", "accumulate", "Lrtdc.core.json.JSONObject;", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "getWithNSString:", "get", "Ljava.lang.Object;", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "getBooleanWithNSString:", "getBoolean", "Z", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "getIntWithNSString:", "getInt", "I", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "getJSONArrayWithNSString:", "getJSONArray", "Lrtdc.core.json.JSONArray;", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "getJSONObjectWithNSString:", "getJSONObject", "Lrtdc.core.json.JSONObject;", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "getLongWithNSString:", "getLong", "J", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "getStringWithNSString:", "getString", "Ljava.lang.String;", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "hasWithNSString:", "has", "Z", 0x1, NULL, NULL },
    { "isNullWithNSString:", "isNull", "Z", 0x1, NULL, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "map", NULL, "Ljava.util.Map;", 0x1, NULL, NULL },
    { "length", NULL, "I", 0x1, NULL, NULL },
    { "names", NULL, "Lrtdc.core.json.JSONArray;", 0x1, NULL, NULL },
    { "trimNumberWithNSString:", "trimNumber", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "numberToStringWithId:", "numberToString", "Ljava.lang.String;", 0x9, "Lrtdc.core.json.JSONException;", NULL },
    { "optWithNSString:", "opt", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "optBooleanWithNSString:", "optBoolean", "Z", 0x1, NULL, NULL },
    { "optBooleanWithNSString:withBoolean:", "optBoolean", "Z", 0x1, NULL, NULL },
    { "putWithNSString:withJavaUtilVector:", "put", "Lrtdc.core.json.JSONObject;", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "optIntWithNSString:", "optInt", "I", 0x1, NULL, NULL },
    { "optIntWithNSString:withInt:", "optInt", "I", 0x1, NULL, NULL },
    { "optJSONArrayWithNSString:", "optJSONArray", "Lrtdc.core.json.JSONArray;", 0x1, NULL, NULL },
    { "optJSONObjectWithNSString:", "optJSONObject", "Lrtdc.core.json.JSONObject;", 0x1, NULL, NULL },
    { "optLongWithNSString:", "optLong", "J", 0x1, NULL, NULL },
    { "optLongWithNSString:withLong:", "optLong", "J", 0x1, NULL, NULL },
    { "optStringWithNSString:", "optString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "optStringWithNSString:withNSString:", "optString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "putWithNSString:withBoolean:", "put", "Lrtdc.core.json.JSONObject;", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "putWithNSString:withInt:", "put", "Lrtdc.core.json.JSONObject;", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "putWithNSString:withLong:", "put", "Lrtdc.core.json.JSONObject;", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "putWithNSString:withId:", "put", "Lrtdc.core.json.JSONObject;", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "putOptWithNSString:withId:", "putOpt", "Lrtdc.core.json.JSONObject;", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "quoteWithNSString:", "quote", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "removeWithNSString:", "remove", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "testValidityWithId:", "testValidity", "V", 0x8, "Lrtdc.core.json.JSONException;", NULL },
    { "toJSONArrayWithJsonJSONArray:", "toJSONArray", "Lrtdc.core.json.JSONArray;", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithInt:", "toString", "Ljava.lang.String;", 0x1, "Lrtdc.core.json.JSONException;", NULL },
    { "toStringWithInt:withInt:", "toString", "Ljava.lang.String;", 0x0, "Lrtdc.core.json.JSONException;", NULL },
    { "valueToStringWithId:", "valueToString", "Ljava.lang.String;", 0x8, "Lrtdc.core.json.JSONException;", NULL },
    { "valueToStringWithId:withInt:withInt:", "valueToString", "Ljava.lang.String;", 0x8, "Lrtdc.core.json.JSONException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TRUE__", "TRUE", 0x19, "Ljava.lang.Boolean;", &JsonJSONObject_TRUE__, NULL, .constantValue.asLong = 0 },
    { "FALSE__", "FALSE", 0x19, "Ljava.lang.Boolean;", &JsonJSONObject_FALSE__, NULL, .constantValue.asLong = 0 },
    { "myHashMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL, NULL, .constantValue.asLong = 0 },
    { "NULL__", "NULL", 0x19, "Ljava.lang.Object;", &JsonJSONObject_NULL__, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lrtdc.core.json.JSONObject$Null;"};
  static const J2ObjcClassInfo _JsonJSONObject = { 2, "JSONObject", "rtdc.core.json", NULL, 0x1, 45, methods, 4, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_JsonJSONObject;
}

@end

void JsonJSONObject_init(JsonJSONObject *self) {
  (void) NSObject_init(self);
  self->myHashMap_ = new_JavaUtilHashMap_init();
}

JsonJSONObject *new_JsonJSONObject_init() {
  JsonJSONObject *self = [JsonJSONObject alloc];
  JsonJSONObject_init(self);
  return self;
}

void JsonJSONObject_initWithJsonJSONTokener_(JsonJSONObject *self, JsonJSONTokener *x) {
  (void) JsonJSONObject_init(self);
  jchar c;
  NSString *key;
  if ([((JsonJSONTokener *) nil_chk(x)) nextClean] != '{') {
    @throw [x syntaxErrorWithNSString:@"A JSONObject text must begin with '{'"];
  }
  for (; ; ) {
    c = [x nextClean];
    switch (c) {
      case 0:
      @throw [x syntaxErrorWithNSString:@"A JSONObject text must end with '}'"];
      case '}':
      return;
      default:
      [x back];
      key = [nil_chk([x nextValue]) description];
    }
    c = [x nextClean];
    if (c == '=') {
      if ([x next] != '>') {
        [x back];
      }
    }
    else if (c != ':') {
      @throw [x syntaxErrorWithNSString:@"Expected a ':' after a key"];
    }
    (void) [self putWithNSString:key withId:[x nextValue]];
    switch ([x nextClean]) {
      case ';':
      case ',':
      if ([x nextClean] == '}') {
        return;
      }
      [x back];
      break;
      case '}':
      return;
      default:
      @throw [x syntaxErrorWithNSString:@"Expected a ',' or '}'"];
    }
  }
}

JsonJSONObject *new_JsonJSONObject_initWithJsonJSONTokener_(JsonJSONTokener *x) {
  JsonJSONObject *self = [JsonJSONObject alloc];
  JsonJSONObject_initWithJsonJSONTokener_(self, x);
  return self;
}

void JsonJSONObject_initWithNSString_(JsonJSONObject *self, NSString *string) {
  (void) JsonJSONObject_initWithJsonJSONTokener_(self, new_JsonJSONTokener_initWithNSString_(string));
}

JsonJSONObject *new_JsonJSONObject_initWithNSString_(NSString *string) {
  JsonJSONObject *self = [JsonJSONObject alloc];
  JsonJSONObject_initWithNSString_(self, string);
  return self;
}

NSString *JsonJSONObject_trimNumberWithNSString_(NSString *s) {
  JsonJSONObject_initialize();
  if ([((NSString *) nil_chk(s)) indexOf:'.'] > 0 && [s indexOf:'e'] < 0 && [s indexOf:'E'] < 0) {
    while ([s hasSuffix:@"0"]) {
      s = [s substring:0 endIndex:((jint) [s length]) - 1];
    }
    if ([((NSString *) nil_chk(s)) hasSuffix:@"."]) {
      s = [s substring:0 endIndex:((jint) [s length]) - 1];
    }
  }
  return s;
}

NSString *JsonJSONObject_numberToStringWithId_(id n) {
  JsonJSONObject_initialize();
  if (n == nil) {
    @throw new_JsonJSONException_initWithNSString_(@"Null pointer");
  }
  JsonJSONObject_testValidityWithId_(n);
  return JsonJSONObject_trimNumberWithNSString_([nil_chk(n) description]);
}

NSString *JsonJSONObject_quoteWithNSString_(NSString *string) {
  JsonJSONObject_initialize();
  if (string == nil || ((jint) [string length]) == 0) {
    return @"\"\"";
  }
  jchar b;
  jchar c = 0;
  jint i;
  jint len = ((jint) [((NSString *) nil_chk(string)) length]);
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithInt_(len + 4);
  NSString *t;
  (void) [sb appendWithChar:'"'];
  for (i = 0; i < len; i += 1) {
    b = c;
    c = [string charAtWithInt:i];
    switch (c) {
      case '\\':
      case '"':
      (void) [sb appendWithChar:'\\'];
      (void) [sb appendWithChar:c];
      break;
      case '/':
      if (b == '<') {
        (void) [sb appendWithChar:'\\'];
      }
      (void) [sb appendWithChar:c];
      break;
      case 0x0008:
      (void) [sb appendWithNSString:@"\\b"];
      break;
      case 0x0009:
      (void) [sb appendWithNSString:@"\\t"];
      break;
      case 0x000a:
      (void) [sb appendWithNSString:@"\\n"];
      break;
      case 0x000c:
      (void) [sb appendWithNSString:@"\\f"];
      break;
      case 0x000d:
      (void) [sb appendWithNSString:@"\\r"];
      break;
      default:
      if (c < ' ') {
        t = JreStrcat("$$", @"000", JavaLangInteger_toHexStringWithInt_(c));
        (void) [sb appendWithNSString:JreStrcat("$$", @"\\u", [t substring:((jint) [t length]) - 4])];
      }
      else {
        (void) [sb appendWithChar:c];
      }
    }
  }
  (void) [sb appendWithChar:'"'];
  return [sb description];
}

void JsonJSONObject_testValidityWithId_(id o) {
  JsonJSONObject_initialize();
  if (o != nil) {
  }
}

NSString *JsonJSONObject_valueToStringWithId_(id value) {
  JsonJSONObject_initialize();
  if (value == nil || [value isEqual:nil]) {
    return @"null";
  }
  if ([JsonJSONString_class_() isInstance:value]) {
    id o;
    @try {
      o = [((id<JsonJSONString>) nil_chk(((id<JsonJSONString>) check_protocol_cast(value, JsonJSONString_class_())))) toJSONString];
    }
    @catch (JavaLangException *e) {
      @throw new_JsonJSONException_initWithJavaLangThrowable_(e);
    }
    if ([o isKindOfClass:[NSString class]]) {
      return (NSString *) check_class_cast(o, [NSString class]);
    }
    @throw new_JsonJSONException_initWithNSString_(JreStrcat("$@", @"Bad value from toJSONString: ", o));
  }
  if ([value isKindOfClass:[JavaLangByte class]] || [value isKindOfClass:[JavaLangShort class]] || [value isKindOfClass:[JavaLangInteger class]] || [value isKindOfClass:[JavaLangLong class]]) {
    return JsonJSONObject_numberToStringWithId_(value);
  }
  if ([value isKindOfClass:[JavaLangBoolean class]] || [value isKindOfClass:[JsonJSONObject class]] || [value isKindOfClass:[JsonJSONArray class]]) {
    return [nil_chk(value) description];
  }
  return JsonJSONObject_quoteWithNSString_([nil_chk(value) description]);
}

NSString *JsonJSONObject_valueToStringWithId_withInt_withInt_(id value, jint indentFactor, jint indent) {
  JsonJSONObject_initialize();
  if (value == nil || [value isEqual:nil]) {
    return @"null";
  }
  @try {
    if ([JsonJSONString_class_() isInstance:value]) {
      id o = [((id<JsonJSONString>) nil_chk(((id<JsonJSONString>) check_protocol_cast(value, JsonJSONString_class_())))) toJSONString];
      if ([o isKindOfClass:[NSString class]]) {
        return (NSString *) check_class_cast(o, [NSString class]);
      }
    }
  }
  @catch (JavaLangException *e) {
  }
  if ([value isKindOfClass:[JavaLangByte class]] || [value isKindOfClass:[JavaLangShort class]] || [value isKindOfClass:[JavaLangInteger class]] || [value isKindOfClass:[JavaLangLong class]]) {
    return JsonJSONObject_numberToStringWithId_(value);
  }
  if ([value isKindOfClass:[JavaLangBoolean class]]) {
    return [nil_chk(value) description];
  }
  if ([value isKindOfClass:[JsonJSONObject class]]) {
    return [((JsonJSONObject *) nil_chk(((JsonJSONObject *) check_class_cast(value, [JsonJSONObject class])))) toStringWithInt:indentFactor withInt:indent];
  }
  if ([value isKindOfClass:[JsonJSONArray class]]) {
    return [((JsonJSONArray *) nil_chk(((JsonJSONArray *) check_class_cast(value, [JsonJSONArray class])))) toStringWithInt:indentFactor withInt:indent];
  }
  return JsonJSONObject_quoteWithNSString_([nil_chk(value) description]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JsonJSONObject)

@implementation JsonJSONObject_Null

- (id)clone {
  return self;
}

- (jboolean)isEqual:(id)object {
  return object == nil || object == self;
}

- (NSString *)description {
  return @"null";
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JsonJSONObject_Null_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "clone", NULL, "Ljava.lang.Object;", 0x14, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _JsonJSONObject_Null = { 2, "Null", "rtdc.core.json", "JSONObject", 0x1a, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_JsonJSONObject_Null;
}

@end

void JsonJSONObject_Null_init(JsonJSONObject_Null *self) {
  (void) NSObject_init(self);
}

JsonJSONObject_Null *new_JsonJSONObject_Null_init() {
  JsonJSONObject_Null *self = [JsonJSONObject_Null alloc];
  JsonJSONObject_Null_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JsonJSONObject_Null)

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nicolasmenard/IdeaProjects/RTDC/core/src/main/java/rtdc/core/util/Cache.java
//

#include "Cache.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/HashMap.h"

@interface UtilCache () {
 @public
  JavaUtilHashMap *map_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(UtilCache, map_, JavaUtilHashMap *)

static UtilCache *UtilCache_INSTANCE_;
J2OBJC_STATIC_FIELD_GETTER(UtilCache, INSTANCE_, UtilCache *)
J2OBJC_STATIC_FIELD_SETTER(UtilCache, INSTANCE_, UtilCache *)

__attribute__((unused)) static void UtilCache_init(UtilCache *self);

__attribute__((unused)) static UtilCache *new_UtilCache_init() NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(UtilCache)

@implementation UtilCache

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  UtilCache_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (UtilCache *)getInstance {
  return UtilCache_getInstance();
}

- (void)putWithNSString:(NSString *)key
                 withId:(id)object {
  [((JavaUtilHashMap *) nil_chk(map_)) putWithId:key withId:object];
}

- (id)retrieveWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) nil_chk(map_)) removeWithId:key];
}

- (id)getWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) nil_chk(map_)) getWithId:key];
}

- (void)dealloc {
  RELEASE_(map_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [UtilCache class]) {
    JreStrongAssign(&UtilCache_INSTANCE_, nil);
    J2OBJC_SET_INITIALIZED(UtilCache)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Cache", NULL, 0x2, NULL, NULL },
    { "getInstance", NULL, "Lrtdc.core.util.Cache;", 0x9, NULL, NULL },
    { "putWithNSString:withId:", "put", "V", 0x1, NULL, NULL },
    { "retrieveWithNSString:", "retrieve", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getWithNSString:", "get", "Ljava.lang.Object;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "map_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "INSTANCE_", NULL, 0xa, "Lrtdc.core.util.Cache;", &UtilCache_INSTANCE_, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _UtilCache = { 2, "Cache", "rtdc.core.util", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_UtilCache;
}

@end

void UtilCache_init(UtilCache *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->map_, new_JavaUtilHashMap_init());
}

UtilCache *new_UtilCache_init() {
  UtilCache *self = [UtilCache alloc];
  UtilCache_init(self);
  return self;
}

UtilCache *UtilCache_getInstance() {
  UtilCache_initialize();
  if (UtilCache_INSTANCE_ == nil) JreStrongAssignAndConsume(&UtilCache_INSTANCE_, new_UtilCache_init());
  return UtilCache_INSTANCE_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(UtilCache)

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nicolasmenard/IdeaProjects/RTDC/core/src/main/java/rtdc/core/service/Service.java
//

#include "AsyncCallback.h"
#include "Bootstrapper.h"
#include "Dispatcher.h"
#include "Factory.h"
#include "HttpRequest.h"
#include "HttpResponse.h"
#include "IOSClass.h"
#include "JSONArray.h"
#include "JSONObject.h"
#include "JsonTransmissionWrapper.h"
#include "Service.h"
#include "SessionExpiredException.h"
#include "Unit.h"
#include "User.h"
#include "java/lang/Boolean.h"
#include "java/util/LinkedList.h"
#include "java/util/Map.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

__attribute__((unused)) static void ServiceService_catchSessionExpiredExceptionWithModelJsonTransmissionWrapper_(ModelJsonTransmissionWrapper *wrapper);

@implementation ServiceService

NSString * ServiceService_URL_ = @"http://192.168.2.49:8888/api/";

- (instancetype)init {
  return [super init];
}

+ (void)authenticateUserWithNSString:(NSString *)username
                        withNSString:(NSString *)password
            withServiceAsyncCallback:(id<ServiceAsyncCallback>)callback {
  ServiceService_authenticateUserWithNSString_withNSString_withServiceAsyncCallback_(username, password, callback);
}

+ (void)updateOrSaveUserWithModelUser:(ModelUser *)user
                         withNSString:(NSString *)password
             withServiceAsyncCallback:(id<ServiceAsyncCallback>)callback {
  ServiceService_updateOrSaveUserWithModelUser_withNSString_withServiceAsyncCallback_(user, password, callback);
}

+ (void)updateOrSaveUnitWithModelUnit:(ModelUnit *)unit
             withServiceAsyncCallback:(id<ServiceAsyncCallback>)callback {
  ServiceService_updateOrSaveUnitWithModelUnit_withServiceAsyncCallback_(unit, callback);
}

+ (void)getUnitsWithServiceAsyncCallback:(id<ServiceAsyncCallback>)callback {
  ServiceService_getUnitsWithServiceAsyncCallback_(callback);
}

+ (void)getUsersWithServiceAsyncCallback:(id<ServiceAsyncCallback>)callback {
  ServiceService_getUsersWithServiceAsyncCallback_(callback);
}

+ (void)catchSessionExpiredExceptionWithModelJsonTransmissionWrapper:(ModelJsonTransmissionWrapper *)wrapper {
  ServiceService_catchSessionExpiredExceptionWithModelJsonTransmissionWrapper_(wrapper);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Service", NULL, 0x2, NULL },
    { "authenticateUserWithNSString:withNSString:withServiceAsyncCallback:", "authenticateUser", "V", 0x9, NULL },
    { "updateOrSaveUserWithModelUser:withNSString:withServiceAsyncCallback:", "updateOrSaveUser", "V", 0x9, NULL },
    { "updateOrSaveUnitWithModelUnit:withServiceAsyncCallback:", "updateOrSaveUnit", "V", 0x9, NULL },
    { "getUnitsWithServiceAsyncCallback:", "getUnits", "V", 0x9, NULL },
    { "getUsersWithServiceAsyncCallback:", "getUsers", "V", 0x9, NULL },
    { "catchSessionExpiredExceptionWithModelJsonTransmissionWrapper:", "catchSessionExpiredException", "V", 0xa, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "URL_", NULL, 0x1a, "Ljava.lang.String;", &ServiceService_URL_,  },
  };
  static const J2ObjcClassInfo _ServiceService = { "Service", "rtdc.core.service", NULL, 0x11, 7, methods, 1, fields, 0, NULL};
  return &_ServiceService;
}

@end

void ServiceService_authenticateUserWithNSString_withNSString_withServiceAsyncCallback_(NSString *username, NSString *password, id<ServiceAsyncCallback> callback) {
  ServiceService_init();
  id<ImplHttpRequest> req = [((id<ImplFactory>) nil_chk(RtdcCoreBootstrapper_get_FACTORY_())) newHttpRequestWithNSString:JreStrcat("$$", ServiceService_URL_, @"authenticate") withImplHttpRequest_RequestMethodEnum:ImplHttpRequest_RequestMethodEnum_get_POST()];
  [((id<ImplHttpRequest>) nil_chk(req)) setHeaderWithNSString:@"Content-type" withNSString:@"application/x-www-form-urlencoded"];
  [req addParameterWithNSString:@"username" withNSString:username];
  [req addParameterWithNSString:@"password" withNSString:password];
  [req executeWithServiceAsyncCallback:[[[ServiceService_$1 alloc] initWithServiceAsyncCallback:callback] autorelease]];
}

void ServiceService_updateOrSaveUserWithModelUser_withNSString_withServiceAsyncCallback_(ModelUser *user, NSString *password, id<ServiceAsyncCallback> callback) {
  ServiceService_init();
  id<ImplHttpRequest> req = [((id<ImplFactory>) nil_chk(RtdcCoreBootstrapper_get_FACTORY_())) newHttpRequestWithNSString:JreStrcat("$$", ServiceService_URL_, @"users") withImplHttpRequest_RequestMethodEnum:ImplHttpRequest_RequestMethodEnum_get_PUT()];
  [((id<ImplHttpRequest>) nil_chk(req)) setHeaderWithNSString:@"Content-type" withNSString:@"application/x-www-form-urlencoded"];
  [req addParameterWithNSString:@"authToken" withNSString:RtdcCoreBootstrapper_get_AUTHENTICATION_TOKEN_()];
  [req addParameterWithNSString:@"user" withNSString:[((ModelUser *) nil_chk(user)) description]];
  [req addParameterWithNSString:@"password" withNSString:password];
  [req executeWithServiceAsyncCallback:[[[ServiceService_$2 alloc] initWithServiceAsyncCallback:callback] autorelease]];
}

void ServiceService_updateOrSaveUnitWithModelUnit_withServiceAsyncCallback_(ModelUnit *unit, id<ServiceAsyncCallback> callback) {
  ServiceService_init();
  id<ImplHttpRequest> req = [((id<ImplFactory>) nil_chk(RtdcCoreBootstrapper_get_FACTORY_())) newHttpRequestWithNSString:JreStrcat("$$", ServiceService_URL_, @"units") withImplHttpRequest_RequestMethodEnum:ImplHttpRequest_RequestMethodEnum_get_PUT()];
  [((id<ImplHttpRequest>) nil_chk(req)) setHeaderWithNSString:@"Content-type" withNSString:@"application/x-www-form-urlencoded"];
  [req addParameterWithNSString:@"authToken" withNSString:RtdcCoreBootstrapper_get_AUTHENTICATION_TOKEN_()];
  [req addParameterWithNSString:@"unit" withNSString:[((ModelUnit *) nil_chk(unit)) description]];
  [req executeWithServiceAsyncCallback:[[[ServiceService_$3 alloc] initWithServiceAsyncCallback:callback] autorelease]];
}

void ServiceService_getUnitsWithServiceAsyncCallback_(id<ServiceAsyncCallback> callback) {
  ServiceService_init();
  id<ImplHttpRequest> req = [((id<ImplFactory>) nil_chk(RtdcCoreBootstrapper_get_FACTORY_())) newHttpRequestWithNSString:JreStrcat("$$", ServiceService_URL_, @"units") withImplHttpRequest_RequestMethodEnum:ImplHttpRequest_RequestMethodEnum_get_GET()];
  [((id<ImplHttpRequest>) nil_chk(req)) setHeaderWithNSString:@"Content-type" withNSString:@"application/x-www-form-urlencoded"];
  [req addParameterWithNSString:@"authToken" withNSString:RtdcCoreBootstrapper_get_AUTHENTICATION_TOKEN_()];
  [req executeWithServiceAsyncCallback:[[[ServiceService_$4 alloc] initWithServiceAsyncCallback:callback] autorelease]];
}

void ServiceService_getUsersWithServiceAsyncCallback_(id<ServiceAsyncCallback> callback) {
  ServiceService_init();
  id<ImplHttpRequest> req = [((id<ImplFactory>) nil_chk(RtdcCoreBootstrapper_get_FACTORY_())) newHttpRequestWithNSString:JreStrcat("$$", ServiceService_URL_, @"users") withImplHttpRequest_RequestMethodEnum:ImplHttpRequest_RequestMethodEnum_get_GET()];
  [((id<ImplHttpRequest>) nil_chk(req)) setHeaderWithNSString:@"Content-type" withNSString:@"application/x-www-form-urlencoded"];
  [req addParameterWithNSString:@"authToken" withNSString:RtdcCoreBootstrapper_get_AUTHENTICATION_TOKEN_()];
  [req executeWithServiceAsyncCallback:[[[ServiceService_$5 alloc] initWithServiceAsyncCallback:callback] autorelease]];
}

void ServiceService_catchSessionExpiredExceptionWithModelJsonTransmissionWrapper_(ModelJsonTransmissionWrapper *wrapper) {
  ServiceService_init();
  [((JavaUtilLoggingLogger *) nil_chk(JavaUtilLoggingLogger_getLoggerWithNSString_(@"RTDC"))) logWithJavaUtilLoggingLevel:JavaUtilLoggingLevel_get_INFO_() withNSString:JreStrcat("$$$", [[IOSClass classWithClass:[ExceptionSessionExpiredException class]] getSimpleName], @" : ", [((ModelJsonTransmissionWrapper *) nil_chk(wrapper)) getStatus])];
  if ([((NSString *) nil_chk([[IOSClass classWithClass:[ExceptionSessionExpiredException class]] getSimpleName])) isEqual:[wrapper getStatus]]) {
    RtdcCoreBootstrapper_set_AUTHENTICATION_TOKEN_(nil);
    [((id<ImplDispatcher>) nil_chk([((id<ImplFactory>) nil_chk(RtdcCoreBootstrapper_get_FACTORY_())) newDispatcher])) goToLoginWithBoolean:YES];
  }
}

@implementation ServiceService_$1

- (void)onSuccessWithId:(id<ImplHttpResponse>)resp {
  ModelJsonTransmissionWrapper *wrapper = [[[ModelJsonTransmissionWrapper alloc] initWithNSString:[((id<ImplHttpResponse>) nil_chk(resp)) getContent]] autorelease];
  ServiceService_catchSessionExpiredExceptionWithModelJsonTransmissionWrapper_(wrapper);
  if ([@"success" isEqual:[wrapper getStatus]]) {
    ModelUser *user = [[[ModelUser alloc] init] autorelease];
    [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onSuccessWithId:user];
  }
  else [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onErrorWithNSString:JreStrcat("$$$", [wrapper getStatus], @" : ", [wrapper getDescription])];
}

- (void)onErrorWithNSString:(NSString *)message {
  [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onErrorWithNSString:message];
}

- (instancetype)initWithServiceAsyncCallback:(id<ServiceAsyncCallback>)capture$0 {
  ServiceService_$1_set_val$callback_(self, capture$0);
  return [super init];
}

- (void)dealloc {
  ServiceService_$1_set_val$callback_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ServiceService_$1 *)other {
  [super copyAllFieldsTo:other];
  ServiceService_$1_set_val$callback_(other, val$callback_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onSuccessWithImplHttpResponse:", "onSuccess", "V", 0x1, NULL },
    { "onErrorWithNSString:", "onError", "V", 0x1, NULL },
    { "initWithServiceAsyncCallback:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lrtdc.core.service.AsyncCallback;", NULL,  },
  };
  static const J2ObjcClassInfo _ServiceService_$1 = { "$1", "rtdc.core.service", "Service", 0x8000, 3, methods, 1, fields, 0, NULL};
  return &_ServiceService_$1;
}

@end

@implementation ServiceService_$2

- (void)onSuccessWithId:(id<ImplHttpResponse>)resp {
  ModelJsonTransmissionWrapper *wrapper = [[[ModelJsonTransmissionWrapper alloc] initWithNSString:[((id<ImplHttpResponse>) nil_chk(resp)) getContent]] autorelease];
  ServiceService_catchSessionExpiredExceptionWithModelJsonTransmissionWrapper_(wrapper);
  if ([@"success" isEqual:[wrapper getStatus]]) [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onSuccessWithId:JavaLangBoolean_valueOfWithBoolean_(YES)];
  else [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onErrorWithNSString:JreStrcat("$$$", [wrapper getStatus], @" : ", [wrapper getDescription])];
}

- (void)onErrorWithNSString:(NSString *)message {
  [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onErrorWithNSString:message];
}

- (instancetype)initWithServiceAsyncCallback:(id<ServiceAsyncCallback>)capture$0 {
  ServiceService_$2_set_val$callback_(self, capture$0);
  return [super init];
}

- (void)dealloc {
  ServiceService_$2_set_val$callback_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ServiceService_$2 *)other {
  [super copyAllFieldsTo:other];
  ServiceService_$2_set_val$callback_(other, val$callback_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onSuccessWithImplHttpResponse:", "onSuccess", "V", 0x1, NULL },
    { "onErrorWithNSString:", "onError", "V", 0x1, NULL },
    { "initWithServiceAsyncCallback:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lrtdc.core.service.AsyncCallback;", NULL,  },
  };
  static const J2ObjcClassInfo _ServiceService_$2 = { "$2", "rtdc.core.service", "Service", 0x8000, 3, methods, 1, fields, 0, NULL};
  return &_ServiceService_$2;
}

@end

@implementation ServiceService_$3

- (void)onSuccessWithId:(id<ImplHttpResponse>)resp {
  ModelJsonTransmissionWrapper *wrapper = [[[ModelJsonTransmissionWrapper alloc] initWithNSString:[((id<ImplHttpResponse>) nil_chk(resp)) getContent]] autorelease];
  ServiceService_catchSessionExpiredExceptionWithModelJsonTransmissionWrapper_(wrapper);
  if ([@"success" isEqual:[wrapper getStatus]]) [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onSuccessWithId:JavaLangBoolean_valueOfWithBoolean_(YES)];
  else [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onErrorWithNSString:JreStrcat("$$$", [wrapper getStatus], @" : ", [wrapper getDescription])];
}

- (void)onErrorWithNSString:(NSString *)message {
  [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onErrorWithNSString:message];
}

- (instancetype)initWithServiceAsyncCallback:(id<ServiceAsyncCallback>)capture$0 {
  ServiceService_$3_set_val$callback_(self, capture$0);
  return [super init];
}

- (void)dealloc {
  ServiceService_$3_set_val$callback_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ServiceService_$3 *)other {
  [super copyAllFieldsTo:other];
  ServiceService_$3_set_val$callback_(other, val$callback_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onSuccessWithImplHttpResponse:", "onSuccess", "V", 0x1, NULL },
    { "onErrorWithNSString:", "onError", "V", 0x1, NULL },
    { "initWithServiceAsyncCallback:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lrtdc.core.service.AsyncCallback;", NULL,  },
  };
  static const J2ObjcClassInfo _ServiceService_$3 = { "$3", "rtdc.core.service", "Service", 0x8000, 3, methods, 1, fields, 0, NULL};
  return &_ServiceService_$3;
}

@end

@implementation ServiceService_$4

- (void)onSuccessWithId:(id<ImplHttpResponse>)resp {
  ModelJsonTransmissionWrapper *wrapper = [[[ModelJsonTransmissionWrapper alloc] initWithNSString:[((id<ImplHttpResponse>) nil_chk(resp)) getContent]] autorelease];
  ServiceService_catchSessionExpiredExceptionWithModelJsonTransmissionWrapper_(wrapper);
  if ([@"success" isEqual:[wrapper getStatus]]) {
    JSONJSONArray *array = [wrapper getDataAsJSONArray];
    JavaUtilLinkedList *units = [[[JavaUtilLinkedList alloc] init] autorelease];
    for (jint i = [((JSONJSONArray *) nil_chk(array)) length] - 1; i >= 0; i--) {
      ModelUnit *unit = [[[ModelUnit alloc] init] autorelease];
      [((id<JavaUtilMap>) nil_chk([unit map])) putAllWithJavaUtilMap:[((JSONJSONObject *) nil_chk([array getJSONObjectWithInt:i])) map]];
      [units addWithId:unit];
    }
    [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onSuccessWithId:units];
  }
  else [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onErrorWithNSString:JreStrcat("$$$", [wrapper getStatus], @" : ", [wrapper getDescription])];
}

- (void)onErrorWithNSString:(NSString *)message {
  [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onErrorWithNSString:message];
}

- (instancetype)initWithServiceAsyncCallback:(id<ServiceAsyncCallback>)capture$0 {
  ServiceService_$4_set_val$callback_(self, capture$0);
  return [super init];
}

- (void)dealloc {
  ServiceService_$4_set_val$callback_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ServiceService_$4 *)other {
  [super copyAllFieldsTo:other];
  ServiceService_$4_set_val$callback_(other, val$callback_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onSuccessWithImplHttpResponse:", "onSuccess", "V", 0x1, NULL },
    { "onErrorWithNSString:", "onError", "V", 0x1, NULL },
    { "initWithServiceAsyncCallback:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lrtdc.core.service.AsyncCallback;", NULL,  },
  };
  static const J2ObjcClassInfo _ServiceService_$4 = { "$4", "rtdc.core.service", "Service", 0x8000, 3, methods, 1, fields, 0, NULL};
  return &_ServiceService_$4;
}

@end

@implementation ServiceService_$5

- (void)onSuccessWithId:(id<ImplHttpResponse>)resp {
  ModelJsonTransmissionWrapper *wrapper = [[[ModelJsonTransmissionWrapper alloc] initWithNSString:[((id<ImplHttpResponse>) nil_chk(resp)) getContent]] autorelease];
  ServiceService_catchSessionExpiredExceptionWithModelJsonTransmissionWrapper_(wrapper);
  if ([@"success" isEqual:[wrapper getStatus]]) {
    JSONJSONArray *array = [wrapper getDataAsJSONArray];
    JavaUtilLinkedList *users = [[[JavaUtilLinkedList alloc] init] autorelease];
    for (jint i = [((JSONJSONArray *) nil_chk(array)) length] - 1; i >= 0; i--) {
      ModelUser *user = [[[ModelUser alloc] init] autorelease];
      [users addWithId:user];
    }
    [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onSuccessWithId:users];
  }
  else [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onErrorWithNSString:JreStrcat("$$$", [wrapper getStatus], @" : ", [wrapper getDescription])];
}

- (void)onErrorWithNSString:(NSString *)message {
  [((id<ServiceAsyncCallback>) nil_chk(val$callback_)) onErrorWithNSString:message];
}

- (instancetype)initWithServiceAsyncCallback:(id<ServiceAsyncCallback>)capture$0 {
  ServiceService_$5_set_val$callback_(self, capture$0);
  return [super init];
}

- (void)dealloc {
  ServiceService_$5_set_val$callback_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ServiceService_$5 *)other {
  [super copyAllFieldsTo:other];
  ServiceService_$5_set_val$callback_(other, val$callback_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onSuccessWithImplHttpResponse:", "onSuccess", "V", 0x1, NULL },
    { "onErrorWithNSString:", "onError", "V", 0x1, NULL },
    { "initWithServiceAsyncCallback:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lrtdc.core.service.AsyncCallback;", NULL,  },
  };
  static const J2ObjcClassInfo _ServiceService_$5 = { "$5", "rtdc.core.service", "Service", 0x8000, 3, methods, 1, fields, 0, NULL};
  return &_ServiceService_$5;
}

@end

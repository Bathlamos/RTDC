//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Z:\RTDC\core\src\main\java\rtdc\core\json\JSONArray.java
//

#include "IOSClass.h"
#include "JSONArray.h"
#include "JSONException.h"
#include "JSONObject.h"
#include "JSONTokener.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Vector.h"

@implementation RtdcCoreJsonJSONArray

- (instancetype)initRtdcCoreJsonJSONArray {
  if (self = [super init]) {
    RtdcCoreJsonJSONArray_setAndConsume_myArrayList_(self, [[JavaUtilVector alloc] init]);
  }
  return self;
}

- (instancetype)init {
  return [self initRtdcCoreJsonJSONArray];
}

- (instancetype)initRtdcCoreJsonJSONArrayWithRtdcCoreJsonJSONTokener:(RtdcCoreJsonJSONTokener *)x {
  if (self = [self initRtdcCoreJsonJSONArray]) {
    if ([((RtdcCoreJsonJSONTokener *) nil_chk(x)) nextClean] != '[') {
      @throw [x syntaxErrorWithNSString:@"A JSONArray text must start with '['"];
    }
    if ([x nextClean] == ']') {
      return self;
    }
    [x back];
    for (; ; ) {
      if ([x nextClean] == ',') {
        [x back];
        [((JavaUtilVector *) nil_chk(self->myArrayList_)) addElementWithId:nil];
      }
      else {
        [x back];
        [((JavaUtilVector *) nil_chk(self->myArrayList_)) addElementWithId:[x nextValue]];
      }
      switch ([x nextClean]) {
        case ';':
        case ',':
        if ([x nextClean] == ']') {
          return self;
        }
        [x back];
        break;
        case ']':
        return self;
        default:
        @throw [x syntaxErrorWithNSString:@"Expected a ',' or ']'"];
      }
    }
  }
  return self;
}

- (instancetype)initWithRtdcCoreJsonJSONTokener:(RtdcCoreJsonJSONTokener *)x {
  return [self initRtdcCoreJsonJSONArrayWithRtdcCoreJsonJSONTokener:x];
}

- (instancetype)initWithNSString:(NSString *)string {
  return [self initRtdcCoreJsonJSONArrayWithRtdcCoreJsonJSONTokener:[[[RtdcCoreJsonJSONTokener alloc] initWithNSString:string] autorelease]];
}

- (instancetype)initWithJavaUtilVector:(JavaUtilVector *)collection {
  if (self = [super init]) {
    if (collection == nil) {
      RtdcCoreJsonJSONArray_setAndConsume_myArrayList_(self, [[JavaUtilVector alloc] init]);
    }
    else {
      jint size = [collection size];
      RtdcCoreJsonJSONArray_setAndConsume_myArrayList_(self, [[JavaUtilVector alloc] initWithInt:size]);
      for (jint i = 0; i < size; i++) {
        [self->myArrayList_ addElementWithId:[collection elementAtWithInt:i]];
      }
    }
  }
  return self;
}

- (id)getWithInt:(jint)index {
  id o = [self optWithInt:index];
  if (o == nil) {
    @throw [[[RtdcCoreJsonJSONException alloc] initWithNSString:JreStrcat("$I$", @"JSONArray[", index, @"] not found.")] autorelease];
  }
  return o;
}

- (jboolean)getBooleanWithInt:(jint)index {
  id o = [self getWithInt:index];
  if ([nil_chk(o) isEqual:RtdcCoreJsonJSONObject_get_FALSE__()] || ([o isKindOfClass:[NSString class]] && [((NSString *) nil_chk([((NSString *) check_class_cast(o, [NSString class])) lowercaseString])) isEqual:@"false"])) {
    return NO;
  }
  else if ([o isEqual:RtdcCoreJsonJSONObject_get_TRUE__()] || ([o isKindOfClass:[NSString class]] && [((NSString *) nil_chk([((NSString *) check_class_cast(o, [NSString class])) lowercaseString])) isEqual:@"true"])) {
    return YES;
  }
  @throw [[[RtdcCoreJsonJSONException alloc] initWithNSString:JreStrcat("$I$", @"JSONArray[", index, @"] is not a Boolean.")] autorelease];
}

- (RtdcCoreJsonJSONArray *)getJSONArrayWithInt:(jint)index {
  id o = [self getWithInt:index];
  if ([o isKindOfClass:[RtdcCoreJsonJSONArray class]]) {
    return (RtdcCoreJsonJSONArray *) check_class_cast(o, [RtdcCoreJsonJSONArray class]);
  }
  @throw [[[RtdcCoreJsonJSONException alloc] initWithNSString:JreStrcat("$I$", @"JSONArray[", index, @"] is not a JSONArray.")] autorelease];
}

- (RtdcCoreJsonJSONObject *)getJSONObjectWithInt:(jint)index {
  id o = [self getWithInt:index];
  if ([o isKindOfClass:[RtdcCoreJsonJSONObject class]]) {
    return (RtdcCoreJsonJSONObject *) check_class_cast(o, [RtdcCoreJsonJSONObject class]);
  }
  @throw [[[RtdcCoreJsonJSONException alloc] initWithNSString:JreStrcat("$I$", @"JSONArray[", index, @"] is not a JSONObject.")] autorelease];
}

- (NSString *)getStringWithInt:(jint)index {
  return [nil_chk([self getWithInt:index]) description];
}

- (jboolean)isNullWithInt:(jint)index {
  return [nil_chk(RtdcCoreJsonJSONObject_get_NULL__()) isEqual:[self optWithInt:index]];
}

- (NSString *)joinWithNSString:(NSString *)separator {
  jint len = [self length];
  JavaLangStringBuffer *sb = [[[JavaLangStringBuffer alloc] init] autorelease];
  for (jint i = 0; i < len; i += 1) {
    if (i > 0) {
      [sb appendWithNSString:separator];
    }
    [sb appendWithNSString:RtdcCoreJsonJSONObject_valueToStringWithId_([((JavaUtilVector *) nil_chk(self->myArrayList_)) elementAtWithInt:i])];
  }
  return [sb description];
}

- (jint)length {
  return [((JavaUtilVector *) nil_chk(self->myArrayList_)) size];
}

- (id)optWithInt:(jint)index {
  return (index < 0 || index >= [self length]) ? nil : [((JavaUtilVector *) nil_chk(self->myArrayList_)) elementAtWithInt:index];
}

- (jboolean)optBooleanWithInt:(jint)index {
  return [self optBooleanWithInt:index withBoolean:NO];
}

- (jboolean)optBooleanWithInt:(jint)index
                  withBoolean:(jboolean)defaultValue {
  @try {
    return [self getBooleanWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (RtdcCoreJsonJSONArray *)optJSONArrayWithInt:(jint)index {
  id o = [self optWithInt:index];
  return [o isKindOfClass:[RtdcCoreJsonJSONArray class]] ? (RtdcCoreJsonJSONArray *) check_class_cast(o, [RtdcCoreJsonJSONArray class]) : nil;
}

- (RtdcCoreJsonJSONObject *)optJSONObjectWithInt:(jint)index {
  id o = [self optWithInt:index];
  return [o isKindOfClass:[RtdcCoreJsonJSONObject class]] ? (RtdcCoreJsonJSONObject *) check_class_cast(o, [RtdcCoreJsonJSONObject class]) : nil;
}

- (NSString *)optStringWithInt:(jint)index {
  return [self optStringWithInt:index withNSString:@""];
}

- (NSString *)optStringWithInt:(jint)index
                  withNSString:(NSString *)defaultValue {
  id o = [self optWithInt:index];
  return o != nil ? [o description] : defaultValue;
}

- (RtdcCoreJsonJSONArray *)putWithBoolean:(jboolean)value {
  [self putWithId:value ? RtdcCoreJsonJSONObject_get_TRUE__() : RtdcCoreJsonJSONObject_get_FALSE__()];
  return self;
}

- (RtdcCoreJsonJSONArray *)putWithJavaUtilVector:(JavaUtilVector *)value {
  [self putWithId:[[[RtdcCoreJsonJSONArray alloc] initWithJavaUtilVector:value] autorelease]];
  return self;
}

- (RtdcCoreJsonJSONArray *)putWithInt:(jint)value {
  [self putWithId:[[[JavaLangInteger alloc] initWithInt:value] autorelease]];
  return self;
}

- (RtdcCoreJsonJSONArray *)putWithLong:(jlong)value {
  [self putWithId:[[[JavaLangLong alloc] initWithLong:value] autorelease]];
  return self;
}

- (RtdcCoreJsonJSONArray *)putWithId:(id)value {
  [((JavaUtilVector *) nil_chk(self->myArrayList_)) addElementWithId:value];
  return self;
}

- (RtdcCoreJsonJSONArray *)putWithInt:(jint)index
                          withBoolean:(jboolean)value {
  [self putWithInt:index withId:value ? RtdcCoreJsonJSONObject_get_TRUE__() : RtdcCoreJsonJSONObject_get_FALSE__()];
  return self;
}

- (RtdcCoreJsonJSONArray *)putWithInt:(jint)index
                   withJavaUtilVector:(JavaUtilVector *)value {
  [self putWithInt:index withId:[[[RtdcCoreJsonJSONArray alloc] initWithJavaUtilVector:value] autorelease]];
  return self;
}

- (RtdcCoreJsonJSONArray *)putWithInt:(jint)index
                              withInt:(jint)value {
  [self putWithInt:index withId:[[[JavaLangInteger alloc] initWithInt:value] autorelease]];
  return self;
}

- (RtdcCoreJsonJSONArray *)putWithInt:(jint)index
                             withLong:(jlong)value {
  [self putWithInt:index withId:[[[JavaLangLong alloc] initWithLong:value] autorelease]];
  return self;
}

- (RtdcCoreJsonJSONArray *)putWithInt:(jint)index
                               withId:(id)value {
  RtdcCoreJsonJSONObject_testValidityWithId_(value);
  if (index < 0) {
    @throw [[[RtdcCoreJsonJSONException alloc] initWithNSString:JreStrcat("$I$", @"JSONArray[", index, @"] not found.")] autorelease];
  }
  if (index < [self length]) {
    [((JavaUtilVector *) nil_chk(self->myArrayList_)) setElementAtWithId:value withInt:index];
  }
  else {
    while (index != [self length]) {
      [self putWithId:RtdcCoreJsonJSONObject_get_NULL__()];
    }
    [self putWithId:value];
  }
  return self;
}

- (RtdcCoreJsonJSONObject *)toJSONObjectWithRtdcCoreJsonJSONArray:(RtdcCoreJsonJSONArray *)names {
  if (names == nil || [names length] == 0 || [self length] == 0) {
    return nil;
  }
  RtdcCoreJsonJSONObject *jo = [[[RtdcCoreJsonJSONObject alloc] init] autorelease];
  for (jint i = 0; i < [((RtdcCoreJsonJSONArray *) nil_chk(names)) length]; i += 1) {
    [jo putWithNSString:[names getStringWithInt:i] withId:[self optWithInt:i]];
  }
  return jo;
}

- (NSString *)description {
  @try {
    return JreStrcat("C$C", '[', [self joinWithNSString:@","], ']');
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (NSString *)toStringWithInt:(jint)indentFactor {
  return [self toStringWithInt:indentFactor withInt:0];
}

- (NSString *)toStringWithInt:(jint)indentFactor
                      withInt:(jint)indent {
  jint len = [self length];
  if (len == 0) {
    return @"[]";
  }
  jint i;
  JavaLangStringBuffer *sb = [[[JavaLangStringBuffer alloc] initWithNSString:@"["] autorelease];
  if (len == 1) {
    [sb appendWithNSString:RtdcCoreJsonJSONObject_valueToStringWithId_withInt_withInt_([((JavaUtilVector *) nil_chk(self->myArrayList_)) elementAtWithInt:0], indentFactor, indent)];
  }
  else {
    jint newindent = indent + indentFactor;
    [sb appendWithChar:0x000a];
    for (i = 0; i < len; i += 1) {
      if (i > 0) {
        [sb appendWithNSString:@",\n"];
      }
      for (jint j = 0; j < newindent; j += 1) {
        [sb appendWithChar:' '];
      }
      [sb appendWithNSString:RtdcCoreJsonJSONObject_valueToStringWithId_withInt_withInt_([((JavaUtilVector *) nil_chk(self->myArrayList_)) elementAtWithInt:i], indentFactor, newindent)];
    }
    [sb appendWithChar:0x000a];
    for (i = 0; i < indent; i += 1) {
      [sb appendWithChar:' '];
    }
  }
  [sb appendWithChar:']'];
  return [sb description];
}

- (void)dealloc {
  RtdcCoreJsonJSONArray_set_myArrayList_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(RtdcCoreJsonJSONArray *)other {
  [super copyAllFieldsTo:other];
  RtdcCoreJsonJSONArray_set_myArrayList_(other, myArrayList_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JSONArray", NULL, 0x1, NULL },
    { "initWithRtdcCoreJsonJSONTokener:", "JSONArray", NULL, 0x1, "Lrtdc.core.json.JSONException;" },
    { "initWithNSString:", "JSONArray", NULL, 0x1, "Lrtdc.core.json.JSONException;" },
    { "initWithJavaUtilVector:", "JSONArray", NULL, 0x1, NULL },
    { "getWithInt:", "get", "Ljava.lang.Object;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "getBooleanWithInt:", "getBoolean", "Z", 0x1, "Lrtdc.core.json.JSONException;" },
    { "getJSONArrayWithInt:", "getJSONArray", "Lrtdc.core.json.JSONArray;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "getJSONObjectWithInt:", "getJSONObject", "Lrtdc.core.json.JSONObject;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "getStringWithInt:", "getString", "Ljava.lang.String;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "isNullWithInt:", "isNull", "Z", 0x1, NULL },
    { "joinWithNSString:", "join", "Ljava.lang.String;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "length", NULL, "I", 0x1, NULL },
    { "optWithInt:", "opt", "Ljava.lang.Object;", 0x1, NULL },
    { "optBooleanWithInt:", "optBoolean", "Z", 0x1, NULL },
    { "optBooleanWithInt:withBoolean:", "optBoolean", "Z", 0x1, NULL },
    { "optJSONArrayWithInt:", "optJSONArray", "Lrtdc.core.json.JSONArray;", 0x1, NULL },
    { "optJSONObjectWithInt:", "optJSONObject", "Lrtdc.core.json.JSONObject;", 0x1, NULL },
    { "optStringWithInt:", "optString", "Ljava.lang.String;", 0x1, NULL },
    { "optStringWithInt:withNSString:", "optString", "Ljava.lang.String;", 0x1, NULL },
    { "putWithBoolean:", "put", "Lrtdc.core.json.JSONArray;", 0x1, NULL },
    { "putWithJavaUtilVector:", "put", "Lrtdc.core.json.JSONArray;", 0x1, NULL },
    { "putWithInt:", "put", "Lrtdc.core.json.JSONArray;", 0x1, NULL },
    { "putWithLong:", "put", "Lrtdc.core.json.JSONArray;", 0x1, NULL },
    { "putWithId:", "put", "Lrtdc.core.json.JSONArray;", 0x1, NULL },
    { "putWithInt:withBoolean:", "put", "Lrtdc.core.json.JSONArray;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "putWithInt:withJavaUtilVector:", "put", "Lrtdc.core.json.JSONArray;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "putWithInt:withInt:", "put", "Lrtdc.core.json.JSONArray;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "putWithInt:withLong:", "put", "Lrtdc.core.json.JSONArray;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "putWithInt:withId:", "put", "Lrtdc.core.json.JSONArray;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "toJSONObjectWithRtdcCoreJsonJSONArray:", "toJSONObject", "Lrtdc.core.json.JSONObject;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithInt:", "toString", "Ljava.lang.String;", 0x1, "Lrtdc.core.json.JSONException;" },
    { "toStringWithInt:withInt:", "toString", "Ljava.lang.String;", 0x0, "Lrtdc.core.json.JSONException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "myArrayList_", NULL, 0x2, "Ljava.util.Vector;", NULL,  },
  };
  static const J2ObjcClassInfo _RtdcCoreJsonJSONArray = { "JSONArray", "rtdc.core.json", NULL, 0x1, 33, methods, 1, fields, 0, NULL};
  return &_RtdcCoreJsonJSONArray;
}

@end

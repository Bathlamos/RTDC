//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nicolasmenard/IdeaProjects/RTDC/core/src/main/java/rtdc/core/controller/LoginController.java
//

#include "Bootstrapper.h"
#include "Dispatcher.h"
#include "Factory.h"
#include "IOSClass.h"
#include "LoginController.h"
#include "LoginView.h"
#include "Service.h"
#include "User.h"

@implementation ControllerLoginController

- (instancetype)initWithRtdcCoreViewLoginView:(id<RtdcCoreViewLoginView>)view {
  if (self = [super init]) {
    ControllerLoginController_set_view_(self, view);
  }
  return self;
}

- (void)login {
  ServiceService_authenticateUserWithNSString_withNSString_withServiceAsyncCallback_([((id<RtdcCoreViewLoginView>) nil_chk(view_)) getUsername], [view_ getPassword], [[[ControllerLoginController_$1 alloc] initWithControllerLoginController:self] autorelease]);
}

- (void)dealloc {
  ControllerLoginController_set_view_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ControllerLoginController *)other {
  [super copyAllFieldsTo:other];
  ControllerLoginController_set_view_(other, view_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRtdcCoreViewLoginView:", "LoginController", NULL, 0x1, NULL },
    { "login", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "view_", NULL, 0x2, "Lrtdc.core.view.LoginView;", NULL,  },
  };
  static const J2ObjcClassInfo _ControllerLoginController = { "LoginController", "rtdc.core.controller", NULL, 0x1, 2, methods, 1, fields, 0, NULL};
  return &_ControllerLoginController;
}

@end

@implementation ControllerLoginController_$1

- (void)onSuccessWithId:(ModelUser *)user {
  [((id<RtdcCoreViewLoginView>) nil_chk(this$0_->view_)) saveAuthenticationTokenWithNSString:[((ModelUser *) nil_chk(user)) getAuthenticationToken]];
  RtdcCoreBootstrapper_set_AUTHENTICATION_TOKEN_([user getAuthenticationToken]);
  [((id<ImplDispatcher>) nil_chk([((id<ImplFactory>) nil_chk(RtdcCoreBootstrapper_get_FACTORY_())) newDispatcher])) goToAllUnitsWithBoolean:YES];
}

- (void)onErrorWithNSString:(NSString *)message {
  [((id<RtdcCoreViewLoginView>) nil_chk(this$0_->view_)) displayErrorWithNSString:@"Error" withNSString:message];
}

- (instancetype)initWithControllerLoginController:(ControllerLoginController *)outer$ {
  ControllerLoginController_$1_set_this$0_(self, outer$);
  return [super init];
}

- (void)dealloc {
  ControllerLoginController_$1_set_this$0_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ControllerLoginController_$1 *)other {
  [super copyAllFieldsTo:other];
  ControllerLoginController_$1_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onSuccessWithModelUser:", "onSuccess", "V", 0x1, NULL },
    { "onErrorWithNSString:", "onError", "V", 0x1, NULL },
    { "initWithControllerLoginController:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lrtdc.core.controller.LoginController;", NULL,  },
  };
  static const J2ObjcClassInfo _ControllerLoginController_$1 = { "$1", "rtdc.core.controller", "LoginController", 0x8000, 3, methods, 1, fields, 0, NULL};
  return &_ControllerLoginController_$1;
}

@end

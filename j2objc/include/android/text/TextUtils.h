//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/frameworks/base/core/java/android/text/TextUtils.java
//

#ifndef _AndroidTextTextUtils_H_
#define _AndroidTextTextUtils_H_

@class IOSCharArray;
@class IOSClass;
@class IOSObjectArray;
@class JavaUtilRegexPattern;
@protocol AndroidTextSpannable;
@protocol AndroidTextSpanned;
@protocol AndroidUtilPrinter;
@protocol JavaLangCharSequence;

#import "JreEmulation.h"
#include "java/lang/Enum.h"
#include "java/lang/Iterable.h"
#include "java/util/Iterator.h"

#define AndroidTextTextUtils_ABSOLUTE_SIZE_SPAN 16
#define AndroidTextTextUtils_ALIGNMENT_SPAN 1
#define AndroidTextTextUtils_ANNOTATION 18
#define AndroidTextTextUtils_BACKGROUND_COLOR_SPAN 12
#define AndroidTextTextUtils_BULLET_SPAN 8
#define AndroidTextTextUtils_CAP_MODE_CHARACTERS 4096
#define AndroidTextTextUtils_CAP_MODE_SENTENCES 16384
#define AndroidTextTextUtils_CAP_MODE_WORDS 8192
#define AndroidTextTextUtils_EASY_EDIT_SPAN 22
#define AndroidTextTextUtils_FIRST_RIGHT_TO_LEFT 0x0590
#define AndroidTextTextUtils_FIRST_SPAN 1
#define AndroidTextTextUtils_FOREGROUND_COLOR_SPAN 2
#define AndroidTextTextUtils_LAST_SPAN 23
#define AndroidTextTextUtils_LEADING_MARGIN_SPAN 10
#define AndroidTextTextUtils_LOCALE_SPAN 23
#define AndroidTextTextUtils_QUOTE_SPAN 9
#define AndroidTextTextUtils_RELATIVE_SIZE_SPAN 3
#define AndroidTextTextUtils_SCALE_X_SPAN 4
#define AndroidTextTextUtils_SPELL_CHECK_SPAN 20
#define AndroidTextTextUtils_STRIKETHROUGH_SPAN 5
#define AndroidTextTextUtils_STYLE_SPAN 7
#define AndroidTextTextUtils_SUBSCRIPT_SPAN 15
#define AndroidTextTextUtils_SUGGESTION_RANGE_SPAN 21
#define AndroidTextTextUtils_SUGGESTION_SPAN 19
#define AndroidTextTextUtils_SUPERSCRIPT_SPAN 14
#define AndroidTextTextUtils_TEXT_APPEARANCE_SPAN 17
#define AndroidTextTextUtils_TYPEFACE_SPAN 13
#define AndroidTextTextUtils_UNDERLINE_SPAN 6
#define AndroidTextTextUtils_URL_SPAN 11
#define AndroidTextTextUtils_ZWNBS_CHAR 0xfeff

@interface AndroidTextTextUtils : NSObject {
}

+ (void)getCharsWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                 withInt:(jint)start
                                 withInt:(jint)end
                           withCharArray:(IOSCharArray *)dest
                                 withInt:(jint)destoff;

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                               withChar:(jchar)ch;

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                               withChar:(jchar)ch
                                withInt:(jint)start;

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                               withChar:(jchar)ch
                                withInt:(jint)start
                                withInt:(jint)end;

+ (jint)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                   withChar:(jchar)ch;

+ (jint)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                   withChar:(jchar)ch
                                    withInt:(jint)last;

+ (jint)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                   withChar:(jchar)ch
                                    withInt:(jint)start
                                    withInt:(jint)last;

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
               withJavaLangCharSequence:(id<JavaLangCharSequence>)needle;

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
               withJavaLangCharSequence:(id<JavaLangCharSequence>)needle
                                withInt:(jint)start;

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
               withJavaLangCharSequence:(id<JavaLangCharSequence>)needle
                                withInt:(jint)start
                                withInt:(jint)end;

+ (jboolean)regionMatchesWithJavaLangCharSequence:(id<JavaLangCharSequence>)one
                                          withInt:(jint)toffset
                         withJavaLangCharSequence:(id<JavaLangCharSequence>)two
                                          withInt:(jint)ooffset
                                          withInt:(jint)len;

+ (NSString *)substringWithJavaLangCharSequence:(id<JavaLangCharSequence>)source
                                        withInt:(jint)start
                                        withInt:(jint)end;

+ (id<JavaLangCharSequence>)joinWithJavaLangIterable:(id<JavaLangIterable>)list;

+ (NSString *)joinWithJavaLangCharSequence:(id<JavaLangCharSequence>)delimiter
                         withNSObjectArray:(IOSObjectArray *)tokens;

+ (NSString *)joinWithJavaLangCharSequence:(id<JavaLangCharSequence>)delimiter
                      withJavaLangIterable:(id<JavaLangIterable>)tokens;

+ (IOSObjectArray *)splitWithNSString:(NSString *)text
                         withNSString:(NSString *)expression;

+ (IOSObjectArray *)splitWithNSString:(NSString *)text
             withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern;

+ (id<JavaLangCharSequence>)stringOrSpannedStringWithJavaLangCharSequence:(id<JavaLangCharSequence>)source;

+ (jboolean)isEmptyWithJavaLangCharSequence:(id<JavaLangCharSequence>)str;

+ (jint)getTrimmedLengthWithJavaLangCharSequence:(id<JavaLangCharSequence>)s;

+ (jboolean)equalsWithJavaLangCharSequence:(id<JavaLangCharSequence>)a
                  withJavaLangCharSequence:(id<JavaLangCharSequence>)b;

+ (void)dumpSpansWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                   withAndroidUtilPrinter:(id<AndroidUtilPrinter>)printer
                             withNSString:(NSString *)prefix;

+ (id<JavaLangCharSequence>)expandTemplateWithJavaLangCharSequence:(id<JavaLangCharSequence>)template_
                                     withJavaLangCharSequenceArray:(IOSObjectArray *)values;

+ (jint)getOffsetBeforeWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                        withInt:(jint)offset;

+ (jint)getOffsetAfterWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                       withInt:(jint)offset;

+ (void)copySpansFromWithAndroidTextSpanned:(id<AndroidTextSpanned>)source
                                    withInt:(jint)start
                                    withInt:(jint)end
                               withIOSClass:(IOSClass *)kind
                   withAndroidTextSpannable:(id<AndroidTextSpannable>)dest
                                    withInt:(jint)destoff OBJC_METHOD_FAMILY_NONE;

+ (jboolean)doesNotNeedBidiWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                            withInt:(jint)start
                                            withInt:(jint)end;

+ (jboolean)doesNotNeedBidiWithCharArray:(IOSCharArray *)text
                                 withInt:(jint)start
                                 withInt:(jint)len;

+ (IOSCharArray *)obtainWithInt:(jint)len;

+ (void)recycleWithCharArray:(IOSCharArray *)temp;

+ (NSString *)htmlEncodeWithNSString:(NSString *)s;

+ (id<JavaLangCharSequence>)concatWithJavaLangCharSequenceArray:(IOSObjectArray *)text;

+ (jboolean)isGraphicWithJavaLangCharSequence:(id<JavaLangCharSequence>)str;

+ (jboolean)isGraphicWithChar:(jchar)c;

+ (jboolean)isDigitsOnlyWithJavaLangCharSequence:(id<JavaLangCharSequence>)str;

+ (jboolean)isPrintableAsciiWithChar:(jchar)c;

+ (jboolean)isPrintableAsciiOnlyWithJavaLangCharSequence:(id<JavaLangCharSequence>)str;

+ (jint)getCapsModeWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                    withInt:(jint)off
                                    withInt:(jint)reqModes;

+ (jboolean)delimitedStringContainsWithNSString:(NSString *)delimitedString
                                       withChar:(jchar)delimiter
                                   withNSString:(NSString *)item;

+ (IOSObjectArray *)removeEmptySpansWithNSObjectArray:(IOSObjectArray *)spans
                               withAndroidTextSpanned:(id<AndroidTextSpanned>)spanned
                                         withIOSClass:(IOSClass *)klass;

+ (jlong)packRangeInLongWithInt:(jint)start
                        withInt:(jint)end;

+ (jint)unpackRangeStartFromLongWithLong:(jlong)range;

+ (jint)unpackRangeEndFromLongWithLong:(jlong)range;

@end

FOUNDATION_EXPORT BOOL AndroidTextTextUtils_initialized;
J2OBJC_STATIC_INIT(AndroidTextTextUtils)
FOUNDATION_EXPORT void AndroidTextTextUtils_getCharsWithJavaLangCharSequence_withInt_withInt_withCharArray_withInt_(id<JavaLangCharSequence> s, jint start, jint end, IOSCharArray *dest, jint destoff);
FOUNDATION_EXPORT jint AndroidTextTextUtils_indexOfWithJavaLangCharSequence_withChar_(id<JavaLangCharSequence> s, jchar ch);
FOUNDATION_EXPORT jint AndroidTextTextUtils_indexOfWithJavaLangCharSequence_withChar_withInt_(id<JavaLangCharSequence> s, jchar ch, jint start);
FOUNDATION_EXPORT jint AndroidTextTextUtils_indexOfWithJavaLangCharSequence_withChar_withInt_withInt_(id<JavaLangCharSequence> s, jchar ch, jint start, jint end);
FOUNDATION_EXPORT jint AndroidTextTextUtils_lastIndexOfWithJavaLangCharSequence_withChar_(id<JavaLangCharSequence> s, jchar ch);
FOUNDATION_EXPORT jint AndroidTextTextUtils_lastIndexOfWithJavaLangCharSequence_withChar_withInt_(id<JavaLangCharSequence> s, jchar ch, jint last);
FOUNDATION_EXPORT jint AndroidTextTextUtils_lastIndexOfWithJavaLangCharSequence_withChar_withInt_withInt_(id<JavaLangCharSequence> s, jchar ch, jint start, jint last);
FOUNDATION_EXPORT jint AndroidTextTextUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> s, id<JavaLangCharSequence> needle);
FOUNDATION_EXPORT jint AndroidTextTextUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> s, id<JavaLangCharSequence> needle, jint start);
FOUNDATION_EXPORT jint AndroidTextTextUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> s, id<JavaLangCharSequence> needle, jint start, jint end);
FOUNDATION_EXPORT jboolean AndroidTextTextUtils_regionMatchesWithJavaLangCharSequence_withInt_withJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> one, jint toffset, id<JavaLangCharSequence> two, jint ooffset, jint len);
FOUNDATION_EXPORT NSString *AndroidTextTextUtils_substringWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> source, jint start, jint end);
FOUNDATION_EXPORT id<JavaLangCharSequence> AndroidTextTextUtils_joinWithJavaLangIterable_(id<JavaLangIterable> list);
FOUNDATION_EXPORT NSString *AndroidTextTextUtils_joinWithJavaLangCharSequence_withNSObjectArray_(id<JavaLangCharSequence> delimiter, IOSObjectArray *tokens);
FOUNDATION_EXPORT NSString *AndroidTextTextUtils_joinWithJavaLangCharSequence_withJavaLangIterable_(id<JavaLangCharSequence> delimiter, id<JavaLangIterable> tokens);
FOUNDATION_EXPORT IOSObjectArray *AndroidTextTextUtils_splitWithNSString_withNSString_(NSString *text, NSString *expression);
FOUNDATION_EXPORT IOSObjectArray *AndroidTextTextUtils_splitWithNSString_withJavaUtilRegexPattern_(NSString *text, JavaUtilRegexPattern *pattern);
FOUNDATION_EXPORT id<JavaLangCharSequence> AndroidTextTextUtils_stringOrSpannedStringWithJavaLangCharSequence_(id<JavaLangCharSequence> source);
FOUNDATION_EXPORT jboolean AndroidTextTextUtils_isEmptyWithJavaLangCharSequence_(id<JavaLangCharSequence> str);
FOUNDATION_EXPORT jint AndroidTextTextUtils_getTrimmedLengthWithJavaLangCharSequence_(id<JavaLangCharSequence> s);
FOUNDATION_EXPORT jboolean AndroidTextTextUtils_equalsWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> a, id<JavaLangCharSequence> b);
FOUNDATION_EXPORT void AndroidTextTextUtils_dumpSpansWithJavaLangCharSequence_withAndroidUtilPrinter_withNSString_(id<JavaLangCharSequence> cs, id<AndroidUtilPrinter> printer, NSString *prefix);
FOUNDATION_EXPORT id<JavaLangCharSequence> AndroidTextTextUtils_expandTemplateWithJavaLangCharSequence_withJavaLangCharSequenceArray_(id<JavaLangCharSequence> template_, IOSObjectArray *values);
FOUNDATION_EXPORT jint AndroidTextTextUtils_getOffsetBeforeWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> text, jint offset);
FOUNDATION_EXPORT jint AndroidTextTextUtils_getOffsetAfterWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> text, jint offset);
FOUNDATION_EXPORT void AndroidTextTextUtils_copySpansFromWithAndroidTextSpanned_withInt_withInt_withIOSClass_withAndroidTextSpannable_withInt_(id<AndroidTextSpanned> source, jint start, jint end, IOSClass *kind, id<AndroidTextSpannable> dest, jint destoff);
FOUNDATION_EXPORT jboolean AndroidTextTextUtils_doesNotNeedBidiWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> s, jint start, jint end);
FOUNDATION_EXPORT jboolean AndroidTextTextUtils_doesNotNeedBidiWithCharArray_withInt_withInt_(IOSCharArray *text, jint start, jint len);
FOUNDATION_EXPORT IOSCharArray *AndroidTextTextUtils_obtainWithInt_(jint len);
FOUNDATION_EXPORT void AndroidTextTextUtils_recycleWithCharArray_(IOSCharArray *temp);
FOUNDATION_EXPORT NSString *AndroidTextTextUtils_htmlEncodeWithNSString_(NSString *s);
FOUNDATION_EXPORT id<JavaLangCharSequence> AndroidTextTextUtils_concatWithJavaLangCharSequenceArray_(IOSObjectArray *text);
FOUNDATION_EXPORT jboolean AndroidTextTextUtils_isGraphicWithJavaLangCharSequence_(id<JavaLangCharSequence> str);
FOUNDATION_EXPORT jboolean AndroidTextTextUtils_isGraphicWithChar_(jchar c);
FOUNDATION_EXPORT jboolean AndroidTextTextUtils_isDigitsOnlyWithJavaLangCharSequence_(id<JavaLangCharSequence> str);
FOUNDATION_EXPORT jboolean AndroidTextTextUtils_isPrintableAsciiWithChar_(jchar c);
FOUNDATION_EXPORT jboolean AndroidTextTextUtils_isPrintableAsciiOnlyWithJavaLangCharSequence_(id<JavaLangCharSequence> str);
FOUNDATION_EXPORT jint AndroidTextTextUtils_getCapsModeWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> cs, jint off, jint reqModes);
FOUNDATION_EXPORT jboolean AndroidTextTextUtils_delimitedStringContainsWithNSString_withChar_withNSString_(NSString *delimitedString, jchar delimiter, NSString *item);
FOUNDATION_EXPORT IOSObjectArray *AndroidTextTextUtils_removeEmptySpansWithNSObjectArray_withAndroidTextSpanned_withIOSClass_(IOSObjectArray *spans, id<AndroidTextSpanned> spanned, IOSClass *klass);
FOUNDATION_EXPORT jlong AndroidTextTextUtils_packRangeInLongWithInt_withInt_(jint start, jint end);
FOUNDATION_EXPORT jint AndroidTextTextUtils_unpackRangeStartFromLongWithLong_(jlong range);
FOUNDATION_EXPORT jint AndroidTextTextUtils_unpackRangeEndFromLongWithLong_(jlong range);

FOUNDATION_EXPORT NSString *AndroidTextTextUtils_TAG_;
J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, TAG_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, ALIGNMENT_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, FIRST_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, FOREGROUND_COLOR_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, RELATIVE_SIZE_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, SCALE_X_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, STRIKETHROUGH_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, UNDERLINE_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, STYLE_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, BULLET_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, QUOTE_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, LEADING_MARGIN_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, URL_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, BACKGROUND_COLOR_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, TYPEFACE_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, SUPERSCRIPT_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, SUBSCRIPT_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, ABSOLUTE_SIZE_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, TEXT_APPEARANCE_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, ANNOTATION, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, SUGGESTION_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, SPELL_CHECK_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, SUGGESTION_RANGE_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, EASY_EDIT_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, LOCALE_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, LAST_SPAN, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, FIRST_RIGHT_TO_LEFT, jchar)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, CAP_MODE_CHARACTERS, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, CAP_MODE_WORDS, jint)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, CAP_MODE_SENTENCES, jint)

FOUNDATION_EXPORT id AndroidTextTextUtils_sLock_;
J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, sLock_, id)
J2OBJC_STATIC_FIELD_SETTER(AndroidTextTextUtils, sLock_, id)

FOUNDATION_EXPORT IOSCharArray *AndroidTextTextUtils_sTemp_;
J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, sTemp_, IOSCharArray *)
J2OBJC_STATIC_FIELD_SETTER(AndroidTextTextUtils, sTemp_, IOSCharArray *)

FOUNDATION_EXPORT IOSObjectArray *AndroidTextTextUtils_EMPTY_STRING_ARRAY_;
J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, EMPTY_STRING_ARRAY_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(AndroidTextTextUtils, EMPTY_STRING_ARRAY_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, ZWNBS_CHAR, jchar)

FOUNDATION_EXPORT NSString *AndroidTextTextUtils_ARAB_SCRIPT_SUBTAG_;
J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, ARAB_SCRIPT_SUBTAG_, NSString *)
J2OBJC_STATIC_FIELD_SETTER(AndroidTextTextUtils, ARAB_SCRIPT_SUBTAG_, NSString *)

FOUNDATION_EXPORT NSString *AndroidTextTextUtils_HEBR_SCRIPT_SUBTAG_;
J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils, HEBR_SCRIPT_SUBTAG_, NSString *)
J2OBJC_STATIC_FIELD_SETTER(AndroidTextTextUtils, HEBR_SCRIPT_SUBTAG_, NSString *)

@protocol AndroidTextTextUtils_StringSplitter < JavaLangIterable, NSObject, JavaObject >
- (void)setStringWithNSString:(NSString *)string;


@end

__attribute__((always_inline)) inline void AndroidTextTextUtils_StringSplitter_init() {}

@interface AndroidTextTextUtils_SimpleStringSplitter : NSObject < AndroidTextTextUtils_StringSplitter, JavaUtilIterator > {
}

- (instancetype)initWithChar:(jchar)delimiter;

- (void)setStringWithNSString:(NSString *)string;

- (id<JavaUtilIterator>)iterator;

- (jboolean)hasNext;

- (NSString *)next;

- (void)remove;


@end

__attribute__((always_inline)) inline void AndroidTextTextUtils_SimpleStringSplitter_init() {}

typedef NS_ENUM(NSUInteger, AndroidTextTextUtils_TruncateAt) {
  AndroidTextTextUtils_TruncateAt_START = 0,
  AndroidTextTextUtils_TruncateAt_MIDDLE = 1,
  AndroidTextTextUtils_TruncateAt_END = 2,
  AndroidTextTextUtils_TruncateAt_MARQUEE = 3,
  AndroidTextTextUtils_TruncateAt_END_SMALL = 4,
};

@interface AndroidTextTextUtils_TruncateAtEnum : JavaLangEnum < NSCopying > {
}

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal;

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *AndroidTextTextUtils_TruncateAtEnum_values();

+ (AndroidTextTextUtils_TruncateAtEnum *)valueOfWithNSString:(NSString *)name;

FOUNDATION_EXPORT AndroidTextTextUtils_TruncateAtEnum *AndroidTextTextUtils_TruncateAtEnum_valueOfWithNSString_(NSString *name);- (id)copyWithZone:(NSZone *)zone;

@end

FOUNDATION_EXPORT BOOL AndroidTextTextUtils_TruncateAtEnum_initialized;
J2OBJC_STATIC_INIT(AndroidTextTextUtils_TruncateAtEnum)

FOUNDATION_EXPORT AndroidTextTextUtils_TruncateAtEnum *AndroidTextTextUtils_TruncateAtEnum_values_[];

#define AndroidTextTextUtils_TruncateAtEnum_START AndroidTextTextUtils_TruncateAtEnum_values_[AndroidTextTextUtils_TruncateAt_START]
J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils_TruncateAtEnum, START, AndroidTextTextUtils_TruncateAtEnum *)

#define AndroidTextTextUtils_TruncateAtEnum_MIDDLE AndroidTextTextUtils_TruncateAtEnum_values_[AndroidTextTextUtils_TruncateAt_MIDDLE]
J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils_TruncateAtEnum, MIDDLE, AndroidTextTextUtils_TruncateAtEnum *)

#define AndroidTextTextUtils_TruncateAtEnum_END AndroidTextTextUtils_TruncateAtEnum_values_[AndroidTextTextUtils_TruncateAt_END]
J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils_TruncateAtEnum, END, AndroidTextTextUtils_TruncateAtEnum *)

#define AndroidTextTextUtils_TruncateAtEnum_MARQUEE AndroidTextTextUtils_TruncateAtEnum_values_[AndroidTextTextUtils_TruncateAt_MARQUEE]
J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils_TruncateAtEnum, MARQUEE, AndroidTextTextUtils_TruncateAtEnum *)

#define AndroidTextTextUtils_TruncateAtEnum_END_SMALL AndroidTextTextUtils_TruncateAtEnum_values_[AndroidTextTextUtils_TruncateAt_END_SMALL]
J2OBJC_STATIC_FIELD_GETTER(AndroidTextTextUtils_TruncateAtEnum, END_SMALL, AndroidTextTextUtils_TruncateAtEnum *)

@protocol AndroidTextTextUtils_EllipsizeCallback < NSObject, JavaObject >

- (void)ellipsizedWithInt:(jint)start
                  withInt:(jint)end;

@end

__attribute__((always_inline)) inline void AndroidTextTextUtils_EllipsizeCallback_init() {}

#endif // _AndroidTextTextUtils_H_

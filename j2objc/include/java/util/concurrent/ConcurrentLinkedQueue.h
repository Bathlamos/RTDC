//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/ConcurrentLinkedQueue.java
//

#ifndef _JavaUtilConcurrentConcurrentLinkedQueue_H_
#define _JavaUtilConcurrentConcurrentLinkedQueue_H_

@class IOSObjectArray;
@class JavaIoObjectInputStream;
@class JavaIoObjectOutputStream;
@class JavaUtilConcurrentConcurrentLinkedQueue_Node;
@class SunMiscUnsafe;
@protocol JavaUtilCollection;

#import "JreEmulation.h"
#include "java/io/Serializable.h"
#include "java/util/AbstractQueue.h"
#include "java/util/Iterator.h"
#include "java/util/Queue.h"

#define JavaUtilConcurrentConcurrentLinkedQueue_serialVersionUID 196745693267521676LL

@interface JavaUtilConcurrentConcurrentLinkedQueue : JavaUtilAbstractQueue < JavaUtilQueue, JavaIoSerializable > {
}

- (instancetype)init;

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jboolean)addWithId:(id)e;

- (void)updateHeadWithJavaUtilConcurrentConcurrentLinkedQueue_Node:(JavaUtilConcurrentConcurrentLinkedQueue_Node *)h
                  withJavaUtilConcurrentConcurrentLinkedQueue_Node:(JavaUtilConcurrentConcurrentLinkedQueue_Node *)p;

- (JavaUtilConcurrentConcurrentLinkedQueue_Node *)succWithJavaUtilConcurrentConcurrentLinkedQueue_Node:(JavaUtilConcurrentConcurrentLinkedQueue_Node *)p;

- (jboolean)offerWithId:(id)e;

- (id)poll;

- (id)peek;

- (JavaUtilConcurrentConcurrentLinkedQueue_Node *)first;

- (jboolean)isEmpty;

- (jint)size;

- (jboolean)containsWithId:(id)o;

- (jboolean)removeWithId:(id)o;

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a;

- (id<JavaUtilIterator>)iterator;


@end

FOUNDATION_EXPORT BOOL JavaUtilConcurrentConcurrentLinkedQueue_initialized;
J2OBJC_STATIC_INIT(JavaUtilConcurrentConcurrentLinkedQueue)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentConcurrentLinkedQueue, serialVersionUID, jlong)

FOUNDATION_EXPORT SunMiscUnsafe *JavaUtilConcurrentConcurrentLinkedQueue_UNSAFE_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentConcurrentLinkedQueue, UNSAFE_, SunMiscUnsafe *)

FOUNDATION_EXPORT jlong JavaUtilConcurrentConcurrentLinkedQueue_headOffset_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentConcurrentLinkedQueue, headOffset_, jlong)

FOUNDATION_EXPORT jlong JavaUtilConcurrentConcurrentLinkedQueue_tailOffset_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentConcurrentLinkedQueue, tailOffset_, jlong)

@interface JavaUtilConcurrentConcurrentLinkedQueue_Node : NSObject {
 @public
  id item_;
  JavaUtilConcurrentConcurrentLinkedQueue_Node *next_;
}

- (instancetype)initWithId:(id)item;

- (jboolean)casItemWithId:(id)cmp
                   withId:(id)val;

- (void)lazySetNextWithJavaUtilConcurrentConcurrentLinkedQueue_Node:(JavaUtilConcurrentConcurrentLinkedQueue_Node *)val;

- (jboolean)casNextWithJavaUtilConcurrentConcurrentLinkedQueue_Node:(JavaUtilConcurrentConcurrentLinkedQueue_Node *)cmp
                   withJavaUtilConcurrentConcurrentLinkedQueue_Node:(JavaUtilConcurrentConcurrentLinkedQueue_Node *)val;

@end

FOUNDATION_EXPORT BOOL JavaUtilConcurrentConcurrentLinkedQueue_Node_initialized;
J2OBJC_STATIC_INIT(JavaUtilConcurrentConcurrentLinkedQueue_Node)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentLinkedQueue_Node, item_, id)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentLinkedQueue_Node, next_, JavaUtilConcurrentConcurrentLinkedQueue_Node *)

FOUNDATION_EXPORT SunMiscUnsafe *JavaUtilConcurrentConcurrentLinkedQueue_Node_UNSAFE_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentConcurrentLinkedQueue_Node, UNSAFE_, SunMiscUnsafe *)

FOUNDATION_EXPORT jlong JavaUtilConcurrentConcurrentLinkedQueue_Node_itemOffset_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentConcurrentLinkedQueue_Node, itemOffset_, jlong)

FOUNDATION_EXPORT jlong JavaUtilConcurrentConcurrentLinkedQueue_Node_nextOffset_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentConcurrentLinkedQueue_Node, nextOffset_, jlong)

@interface JavaUtilConcurrentConcurrentLinkedQueue_Itr : NSObject < JavaUtilIterator > {
}

- (instancetype)initWithJavaUtilConcurrentConcurrentLinkedQueue:(JavaUtilConcurrentConcurrentLinkedQueue *)outer$;

- (jboolean)hasNext;

- (id)next;

- (void)remove;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentConcurrentLinkedQueue_Itr_init() {}

#endif // _JavaUtilConcurrentConcurrentLinkedQueue_H_

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/Phaser.java
//

#ifndef _JavaUtilConcurrentPhaser_H_
#define _JavaUtilConcurrentPhaser_H_

@class JavaLangThread;
@class JavaUtilConcurrentAtomicAtomicReference;
@class JavaUtilConcurrentPhaser_QNode;
@class JavaUtilConcurrentTimeUnitEnum;
@class SunMiscUnsafe;

#import "JreEmulation.h"
#include "java/util/concurrent/ForkJoinPool.h"

#define JavaUtilConcurrentPhaser_COUNTS_MASK 4294967295LL
#define JavaUtilConcurrentPhaser_EMPTY 1
#define JavaUtilConcurrentPhaser_MAX_PARTIES 65535
#define JavaUtilConcurrentPhaser_MAX_PHASE 2147483647
#define JavaUtilConcurrentPhaser_ONE_ARRIVAL 1
#define JavaUtilConcurrentPhaser_ONE_DEREGISTER 65537
#define JavaUtilConcurrentPhaser_ONE_PARTY 65536
#define JavaUtilConcurrentPhaser_PARTIES_MASK 4294901760LL
#define JavaUtilConcurrentPhaser_PARTIES_SHIFT 16
#define JavaUtilConcurrentPhaser_PHASE_SHIFT 32
#define JavaUtilConcurrentPhaser_TERMINATION_BIT ((jlong) 0x8000000000000000LL)
#define JavaUtilConcurrentPhaser_UNARRIVED_MASK 65535

@interface JavaUtilConcurrentPhaser : NSObject {
}

- (instancetype)init;

- (instancetype)initWithInt:(jint)parties;

- (instancetype)initWithJavaUtilConcurrentPhaser:(JavaUtilConcurrentPhaser *)parent;

- (instancetype)initWithJavaUtilConcurrentPhaser:(JavaUtilConcurrentPhaser *)parent
                                         withInt:(jint)parties;

- (jint)register__;

- (jint)bulkRegisterWithInt:(jint)parties;

- (jint)arrive;

- (jint)arriveAndDeregister;

- (jint)arriveAndAwaitAdvance;

- (jint)awaitAdvanceWithInt:(jint)phase;

- (jint)awaitAdvanceInterruptiblyWithInt:(jint)phase;

- (jint)awaitAdvanceInterruptiblyWithInt:(jint)phase
                                withLong:(jlong)timeout
      withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (void)forceTermination;

- (jint)getPhase;

- (jint)getRegisteredParties;

- (jint)getArrivedParties;

- (jint)getUnarrivedParties;

- (JavaUtilConcurrentPhaser *)getParent;

- (JavaUtilConcurrentPhaser *)getRoot;

- (jboolean)isTerminated;

- (jboolean)onAdvanceWithInt:(jint)phase
                     withInt:(jint)registeredParties;

- (NSString *)description;

@end

FOUNDATION_EXPORT BOOL JavaUtilConcurrentPhaser_initialized;
J2OBJC_STATIC_INIT(JavaUtilConcurrentPhaser)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, MAX_PARTIES, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, MAX_PHASE, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, PARTIES_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, PHASE_SHIFT, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, UNARRIVED_MASK, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, PARTIES_MASK, jlong)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, COUNTS_MASK, jlong)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, TERMINATION_BIT, jlong)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, ONE_ARRIVAL, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, ONE_PARTY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, ONE_DEREGISTER, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, EMPTY, jint)

FOUNDATION_EXPORT jint JavaUtilConcurrentPhaser_NCPU_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, NCPU_, jint)

FOUNDATION_EXPORT jint JavaUtilConcurrentPhaser_SPINS_PER_ARRIVAL_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, SPINS_PER_ARRIVAL_, jint)

FOUNDATION_EXPORT SunMiscUnsafe *JavaUtilConcurrentPhaser_UNSAFE_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, UNSAFE_, SunMiscUnsafe *)

FOUNDATION_EXPORT jlong JavaUtilConcurrentPhaser_stateOffset_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentPhaser, stateOffset_, jlong)

@interface JavaUtilConcurrentPhaser_QNode : NSObject < JavaUtilConcurrentForkJoinPool_ManagedBlocker > {
 @public
  JavaUtilConcurrentPhaser *phaser_;
  jint phase_;
  jboolean interruptible_;
  jboolean timed_;
  jboolean wasInterrupted_;
  jlong nanos_;
  jlong lastTime_;
  JavaLangThread *thread_;
  JavaUtilConcurrentPhaser_QNode *next_;
}

- (instancetype)initWithJavaUtilConcurrentPhaser:(JavaUtilConcurrentPhaser *)phaser
                                         withInt:(jint)phase
                                     withBoolean:(jboolean)interruptible
                                     withBoolean:(jboolean)timed
                                        withLong:(jlong)nanos;

- (jboolean)isReleasable;

- (jboolean)block;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentPhaser_QNode_init() {}

J2OBJC_FIELD_SETTER(JavaUtilConcurrentPhaser_QNode, phaser_, JavaUtilConcurrentPhaser *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentPhaser_QNode, thread_, JavaLangThread *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentPhaser_QNode, next_, JavaUtilConcurrentPhaser_QNode *)

#endif // _JavaUtilConcurrentPhaser_H_

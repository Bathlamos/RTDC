//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/ForkJoinTask.java
//

#ifndef _JavaUtilConcurrentForkJoinTask_H_
#define _JavaUtilConcurrentForkJoinTask_H_

@class IOSObjectArray;
@class JavaIoObjectInputStream;
@class JavaIoObjectOutputStream;
@class JavaLangRefReferenceQueue;
@class JavaLangThrowable;
@class JavaUtilConcurrentForkJoinPool;
@class JavaUtilConcurrentForkJoinTask;
@class JavaUtilConcurrentLocksReentrantLock;
@class JavaUtilConcurrentTimeUnitEnum;
@class SunMiscUnsafe;
@protocol JavaLangRunnable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;

#import "JreEmulation.h"
#include "java/io/Serializable.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/RunnableFuture.h"

@interface JavaUtilConcurrentForkJoinTask_ExceptionNode : JavaLangRefWeakReference {
 @public
  JavaLangThrowable *ex_;
  JavaUtilConcurrentForkJoinTask_ExceptionNode *next_;
  jlong thrower_;
}

- (instancetype)initWithJavaUtilConcurrentForkJoinTask:(JavaUtilConcurrentForkJoinTask *)task
                                 withJavaLangThrowable:(JavaLangThrowable *)ex
      withJavaUtilConcurrentForkJoinTask_ExceptionNode:(JavaUtilConcurrentForkJoinTask_ExceptionNode *)next;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentForkJoinTask_ExceptionNode_init() {}

J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_ExceptionNode, ex_, JavaLangThrowable *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_ExceptionNode, next_, JavaUtilConcurrentForkJoinTask_ExceptionNode *)

#define JavaUtilConcurrentForkJoinTask_CANCELLED -2
#define JavaUtilConcurrentForkJoinTask_EXCEPTIONAL -3
#define JavaUtilConcurrentForkJoinTask_EXCEPTION_MAP_CAPACITY 32
#define JavaUtilConcurrentForkJoinTask_NORMAL -1
#define JavaUtilConcurrentForkJoinTask_SIGNAL 1
#define JavaUtilConcurrentForkJoinTask_serialVersionUID -7721805057305804111LL

@interface JavaUtilConcurrentForkJoinTask : NSObject < JavaUtilConcurrentFuture, JavaIoSerializable > {
 @public
  jint status_;
}

- (void)tryAwaitDoneWithLong:(jlong)millis;

- (void)doExec;

+ (void)helpExpungeStaleExceptions;

- (JavaUtilConcurrentForkJoinTask *)fork;

- (id)join;

- (id)invoke;

+ (void)invokeAllWithJavaUtilConcurrentForkJoinTask:(JavaUtilConcurrentForkJoinTask *)t1
                 withJavaUtilConcurrentForkJoinTask:(JavaUtilConcurrentForkJoinTask *)t2;

+ (void)invokeAllWithJavaUtilConcurrentForkJoinTaskArray:(IOSObjectArray *)tasks;

+ (id<JavaUtilCollection>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning;

- (void)cancelIgnoringExceptions;

- (jboolean)isDone;

- (jboolean)isCancelled;

- (jboolean)isCompletedAbnormally;

- (jboolean)isCompletedNormally;

- (JavaLangThrowable *)getException;

- (void)completeExceptionallyWithJavaLangThrowable:(JavaLangThrowable *)ex;

- (void)completeWithId:(id)value;

- (id)get;

- (id)getWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (void)quietlyJoin;

- (void)quietlyInvoke;

+ (void)helpQuiesce;

- (void)reinitialize;

+ (JavaUtilConcurrentForkJoinPool *)getPool;

+ (jboolean)inForkJoinPool;

- (jboolean)tryUnfork;

+ (jint)getQueuedTaskCount;

+ (jint)getSurplusQueuedTaskCount;

- (id)getRawResult;

- (void)setRawResultWithId:(id)value;

- (jboolean)exec;

+ (JavaUtilConcurrentForkJoinTask *)peekNextLocalTask;

+ (JavaUtilConcurrentForkJoinTask *)pollNextLocalTask;

+ (JavaUtilConcurrentForkJoinTask *)pollTask;

+ (JavaUtilConcurrentForkJoinTask *)adaptWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;

+ (JavaUtilConcurrentForkJoinTask *)adaptWithJavaLangRunnable:(id<JavaLangRunnable>)runnable
                                                       withId:(id)result;

+ (JavaUtilConcurrentForkJoinTask *)adaptWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

- (instancetype)init;

@end

FOUNDATION_EXPORT BOOL JavaUtilConcurrentForkJoinTask_initialized;
J2OBJC_STATIC_INIT(JavaUtilConcurrentForkJoinTask)
FOUNDATION_EXPORT void JavaUtilConcurrentForkJoinTask_helpExpungeStaleExceptions();
FOUNDATION_EXPORT void JavaUtilConcurrentForkJoinTask_invokeAllWithJavaUtilConcurrentForkJoinTask_withJavaUtilConcurrentForkJoinTask_(JavaUtilConcurrentForkJoinTask *t1, JavaUtilConcurrentForkJoinTask *t2);
FOUNDATION_EXPORT void JavaUtilConcurrentForkJoinTask_invokeAllWithJavaUtilConcurrentForkJoinTaskArray_(IOSObjectArray *tasks);
FOUNDATION_EXPORT id<JavaUtilCollection> JavaUtilConcurrentForkJoinTask_invokeAllWithJavaUtilCollection_(id<JavaUtilCollection> tasks);
FOUNDATION_EXPORT void JavaUtilConcurrentForkJoinTask_helpQuiesce();
FOUNDATION_EXPORT JavaUtilConcurrentForkJoinPool *JavaUtilConcurrentForkJoinTask_getPool();
FOUNDATION_EXPORT jboolean JavaUtilConcurrentForkJoinTask_inForkJoinPool();
FOUNDATION_EXPORT jint JavaUtilConcurrentForkJoinTask_getQueuedTaskCount();
FOUNDATION_EXPORT jint JavaUtilConcurrentForkJoinTask_getSurplusQueuedTaskCount();
FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask *JavaUtilConcurrentForkJoinTask_peekNextLocalTask();
FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask *JavaUtilConcurrentForkJoinTask_pollNextLocalTask();
FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask *JavaUtilConcurrentForkJoinTask_pollTask();
FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask *JavaUtilConcurrentForkJoinTask_adaptWithJavaLangRunnable_(id<JavaLangRunnable> runnable);
FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask *JavaUtilConcurrentForkJoinTask_adaptWithJavaLangRunnable_withId_(id<JavaLangRunnable> runnable, id result);
FOUNDATION_EXPORT JavaUtilConcurrentForkJoinTask *JavaUtilConcurrentForkJoinTask_adaptWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable);

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentForkJoinTask, NORMAL, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentForkJoinTask, CANCELLED, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentForkJoinTask, EXCEPTIONAL, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentForkJoinTask, SIGNAL, jint)

FOUNDATION_EXPORT IOSObjectArray *JavaUtilConcurrentForkJoinTask_exceptionTable_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentForkJoinTask, exceptionTable_, IOSObjectArray *)

FOUNDATION_EXPORT JavaUtilConcurrentLocksReentrantLock *JavaUtilConcurrentForkJoinTask_exceptionTableLock_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentForkJoinTask, exceptionTableLock_, JavaUtilConcurrentLocksReentrantLock *)

FOUNDATION_EXPORT JavaLangRefReferenceQueue *JavaUtilConcurrentForkJoinTask_exceptionTableRefQueue_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentForkJoinTask, exceptionTableRefQueue_, JavaLangRefReferenceQueue *)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentForkJoinTask, EXCEPTION_MAP_CAPACITY, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentForkJoinTask, serialVersionUID, jlong)

FOUNDATION_EXPORT SunMiscUnsafe *JavaUtilConcurrentForkJoinTask_UNSAFE_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentForkJoinTask, UNSAFE_, SunMiscUnsafe *)

FOUNDATION_EXPORT jlong JavaUtilConcurrentForkJoinTask_statusOffset_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentForkJoinTask, statusOffset_, jlong)

#define JavaUtilConcurrentForkJoinTask_AdaptedRunnable_serialVersionUID 5232453952276885070LL

@interface JavaUtilConcurrentForkJoinTask_AdaptedRunnable : JavaUtilConcurrentForkJoinTask < JavaUtilConcurrentRunnableFuture > {
 @public
  id<JavaLangRunnable> runnable_;
  id resultOnCompletion_;
  id result_;
}

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)runnable
                                  withId:(id)result;

- (id)getRawResult;

- (void)setRawResultWithId:(id)v;

- (jboolean)exec;

- (void)run;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentForkJoinTask_AdaptedRunnable_init() {}

J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedRunnable, runnable_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedRunnable, resultOnCompletion_, id)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedRunnable, result_, id)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentForkJoinTask_AdaptedRunnable, serialVersionUID, jlong)

#define JavaUtilConcurrentForkJoinTask_AdaptedCallable_serialVersionUID 2838392045355241008LL

@interface JavaUtilConcurrentForkJoinTask_AdaptedCallable : JavaUtilConcurrentForkJoinTask < JavaUtilConcurrentRunnableFuture > {
 @public
  id<JavaUtilConcurrentCallable> callable_;
  id result_;
}

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

- (id)getRawResult;

- (void)setRawResultWithId:(id)v;

- (jboolean)exec;

- (void)run;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentForkJoinTask_AdaptedCallable_init() {}

J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedCallable, callable_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedCallable, result_, id)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentForkJoinTask_AdaptedCallable, serialVersionUID, jlong)

#endif // _JavaUtilConcurrentForkJoinTask_H_

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/Executors.java
//

#ifndef _JavaUtilConcurrentExecutors_H_
#define _JavaUtilConcurrentExecutors_H_

@class JavaLangClassLoader;
@class JavaLangThread;
@class JavaLangThreadGroup;
@class JavaLangVoid;
@class JavaSecurityAccessControlContext;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentTimeUnitEnum;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentExecutorService;
@protocol JavaUtilConcurrentFuture;
@protocol JavaUtilConcurrentScheduledFuture;
@protocol JavaUtilList;

#import "JreEmulation.h"
#include "java/lang/Runnable.h"
#include "java/security/PrivilegedAction.h"
#include "java/security/PrivilegedExceptionAction.h"
#include "java/util/concurrent/AbstractExecutorService.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ThreadFactory.h"

@interface JavaUtilConcurrentExecutors : NSObject {
}

+ (id<JavaUtilConcurrentExecutorService>)newFixedThreadPoolWithInt:(jint)nThreads OBJC_METHOD_FAMILY_NONE;

+ (id<JavaUtilConcurrentExecutorService>)newFixedThreadPoolWithInt:(jint)nThreads
                               withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory OBJC_METHOD_FAMILY_NONE;

+ (id<JavaUtilConcurrentExecutorService>)newSingleThreadExecutor OBJC_METHOD_FAMILY_NONE;

+ (id<JavaUtilConcurrentExecutorService>)newSingleThreadExecutorWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory OBJC_METHOD_FAMILY_NONE;

+ (id<JavaUtilConcurrentExecutorService>)newCachedThreadPool OBJC_METHOD_FAMILY_NONE;

+ (id<JavaUtilConcurrentExecutorService>)newCachedThreadPoolWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory OBJC_METHOD_FAMILY_NONE;

+ (id<JavaUtilConcurrentScheduledExecutorService>)newSingleThreadScheduledExecutor OBJC_METHOD_FAMILY_NONE;

+ (id<JavaUtilConcurrentScheduledExecutorService>)newSingleThreadScheduledExecutorWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory OBJC_METHOD_FAMILY_NONE;

+ (id<JavaUtilConcurrentScheduledExecutorService>)newScheduledThreadPoolWithInt:(jint)corePoolSize OBJC_METHOD_FAMILY_NONE;

+ (id<JavaUtilConcurrentScheduledExecutorService>)newScheduledThreadPoolWithInt:(jint)corePoolSize
                                            withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory OBJC_METHOD_FAMILY_NONE;

+ (id<JavaUtilConcurrentExecutorService>)unconfigurableExecutorServiceWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executor;

+ (id<JavaUtilConcurrentScheduledExecutorService>)unconfigurableScheduledExecutorServiceWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)executor;

+ (id<JavaUtilConcurrentThreadFactory>)defaultThreadFactory;

+ (id<JavaUtilConcurrentThreadFactory>)privilegedThreadFactory;

+ (id<JavaUtilConcurrentCallable>)callableWithJavaLangRunnable:(id<JavaLangRunnable>)task
                                                        withId:(id)result;

+ (id<JavaUtilConcurrentCallable>)callableWithJavaLangRunnable:(id<JavaLangRunnable>)task;

+ (id<JavaUtilConcurrentCallable>)callableWithJavaSecurityPrivilegedAction:(id<JavaSecurityPrivilegedAction>)action;

+ (id<JavaUtilConcurrentCallable>)callableWithJavaSecurityPrivilegedExceptionAction:(id<JavaSecurityPrivilegedExceptionAction>)action;

+ (id<JavaUtilConcurrentCallable>)privilegedCallableWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

+ (id<JavaUtilConcurrentCallable>)privilegedCallableUsingCurrentClassLoaderWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentExecutors_init() {}
FOUNDATION_EXPORT id<JavaUtilConcurrentExecutorService> JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(jint nThreads);
FOUNDATION_EXPORT id<JavaUtilConcurrentExecutorService> JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_withJavaUtilConcurrentThreadFactory_(jint nThreads, id<JavaUtilConcurrentThreadFactory> threadFactory);
FOUNDATION_EXPORT id<JavaUtilConcurrentExecutorService> JavaUtilConcurrentExecutors_newSingleThreadExecutor();
FOUNDATION_EXPORT id<JavaUtilConcurrentExecutorService> JavaUtilConcurrentExecutors_newSingleThreadExecutorWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);
FOUNDATION_EXPORT id<JavaUtilConcurrentExecutorService> JavaUtilConcurrentExecutors_newCachedThreadPool();
FOUNDATION_EXPORT id<JavaUtilConcurrentExecutorService> JavaUtilConcurrentExecutors_newCachedThreadPoolWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);
FOUNDATION_EXPORT id<JavaUtilConcurrentScheduledExecutorService> JavaUtilConcurrentExecutors_newSingleThreadScheduledExecutor();
FOUNDATION_EXPORT id<JavaUtilConcurrentScheduledExecutorService> JavaUtilConcurrentExecutors_newSingleThreadScheduledExecutorWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);
FOUNDATION_EXPORT id<JavaUtilConcurrentScheduledExecutorService> JavaUtilConcurrentExecutors_newScheduledThreadPoolWithInt_(jint corePoolSize);
FOUNDATION_EXPORT id<JavaUtilConcurrentScheduledExecutorService> JavaUtilConcurrentExecutors_newScheduledThreadPoolWithInt_withJavaUtilConcurrentThreadFactory_(jint corePoolSize, id<JavaUtilConcurrentThreadFactory> threadFactory);
FOUNDATION_EXPORT id<JavaUtilConcurrentExecutorService> JavaUtilConcurrentExecutors_unconfigurableExecutorServiceWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> executor);
FOUNDATION_EXPORT id<JavaUtilConcurrentScheduledExecutorService> JavaUtilConcurrentExecutors_unconfigurableScheduledExecutorServiceWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> executor);
FOUNDATION_EXPORT id<JavaUtilConcurrentThreadFactory> JavaUtilConcurrentExecutors_defaultThreadFactory();
FOUNDATION_EXPORT id<JavaUtilConcurrentThreadFactory> JavaUtilConcurrentExecutors_privilegedThreadFactory();
FOUNDATION_EXPORT id<JavaUtilConcurrentCallable> JavaUtilConcurrentExecutors_callableWithJavaLangRunnable_withId_(id<JavaLangRunnable> task, id result);
FOUNDATION_EXPORT id<JavaUtilConcurrentCallable> JavaUtilConcurrentExecutors_callableWithJavaLangRunnable_(id<JavaLangRunnable> task);
FOUNDATION_EXPORT id<JavaUtilConcurrentCallable> JavaUtilConcurrentExecutors_callableWithJavaSecurityPrivilegedAction_(id<JavaSecurityPrivilegedAction> action);
FOUNDATION_EXPORT id<JavaUtilConcurrentCallable> JavaUtilConcurrentExecutors_callableWithJavaSecurityPrivilegedExceptionAction_(id<JavaSecurityPrivilegedExceptionAction> action);
FOUNDATION_EXPORT id<JavaUtilConcurrentCallable> JavaUtilConcurrentExecutors_privilegedCallableWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable);
FOUNDATION_EXPORT id<JavaUtilConcurrentCallable> JavaUtilConcurrentExecutors_privilegedCallableUsingCurrentClassLoaderWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable);

@interface JavaUtilConcurrentExecutors_RunnableAdapter : NSObject < JavaUtilConcurrentCallable > {
 @public
  id<JavaLangRunnable> task_;
  id result_;
}

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)task
                                  withId:(id)result;

- (id)call;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentExecutors_RunnableAdapter_init() {}

J2OBJC_FIELD_SETTER(JavaUtilConcurrentExecutors_RunnableAdapter, task_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentExecutors_RunnableAdapter, result_, id)

@interface JavaUtilConcurrentExecutors_PrivilegedCallable : NSObject < JavaUtilConcurrentCallable > {
}

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task;

- (id)call;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentExecutors_PrivilegedCallable_init() {}

@interface JavaUtilConcurrentExecutors_PrivilegedCallable_$1 : NSObject < JavaSecurityPrivilegedExceptionAction > {
}

- (id)run;

- (instancetype)initWithJavaUtilConcurrentExecutors_PrivilegedCallable:(JavaUtilConcurrentExecutors_PrivilegedCallable *)outer$;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentExecutors_PrivilegedCallable_$1_init() {}

@interface JavaUtilConcurrentExecutors_PrivilegedCallableUsingCurrentClassLoader : NSObject < JavaUtilConcurrentCallable > {
}

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task;

- (id)call;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentExecutors_PrivilegedCallableUsingCurrentClassLoader_init() {}

@interface JavaUtilConcurrentExecutors_PrivilegedCallableUsingCurrentClassLoader_$1 : NSObject < JavaSecurityPrivilegedExceptionAction > {
}

- (id)run;

- (instancetype)initWithJavaUtilConcurrentExecutors_PrivilegedCallableUsingCurrentClassLoader:(JavaUtilConcurrentExecutors_PrivilegedCallableUsingCurrentClassLoader *)outer$;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentExecutors_PrivilegedCallableUsingCurrentClassLoader_$1_init() {}

@interface JavaUtilConcurrentExecutors_DefaultThreadFactory : NSObject < JavaUtilConcurrentThreadFactory > {
}

- (instancetype)init;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r OBJC_METHOD_FAMILY_NONE;

@end

FOUNDATION_EXPORT BOOL JavaUtilConcurrentExecutors_DefaultThreadFactory_initialized;
J2OBJC_STATIC_INIT(JavaUtilConcurrentExecutors_DefaultThreadFactory)

FOUNDATION_EXPORT JavaUtilConcurrentAtomicAtomicInteger *JavaUtilConcurrentExecutors_DefaultThreadFactory_poolNumber_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentExecutors_DefaultThreadFactory, poolNumber_, JavaUtilConcurrentAtomicAtomicInteger *)

@interface JavaUtilConcurrentExecutors_PrivilegedThreadFactory : JavaUtilConcurrentExecutors_DefaultThreadFactory {
}

- (instancetype)init;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r OBJC_METHOD_FAMILY_NONE;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentExecutors_PrivilegedThreadFactory_init() {}

@interface JavaUtilConcurrentExecutors_PrivilegedThreadFactory_$1 : NSObject < JavaLangRunnable > {
}

- (void)run;

- (instancetype)initWithJavaUtilConcurrentExecutors_PrivilegedThreadFactory:(JavaUtilConcurrentExecutors_PrivilegedThreadFactory *)outer$
                                                       withJavaLangRunnable:(id<JavaLangRunnable>)capture$0;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentExecutors_PrivilegedThreadFactory_$1_init() {}

@interface JavaUtilConcurrentExecutors_PrivilegedThreadFactory_$1_$1 : NSObject < JavaSecurityPrivilegedAction > {
}

- (id)run;

- (instancetype)initWithJavaUtilConcurrentExecutors_PrivilegedThreadFactory_$1:(JavaUtilConcurrentExecutors_PrivilegedThreadFactory_$1 *)outer$;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentExecutors_PrivilegedThreadFactory_$1_$1_init() {}

@interface JavaUtilConcurrentExecutors_DelegatedExecutorService : JavaUtilConcurrentAbstractExecutorService {
}

- (instancetype)initWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executor;

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

- (void)shutdown;

- (id<JavaUtilList>)shutdownNow;

- (jboolean)isShutdown;

- (jboolean)isTerminated;

- (jboolean)awaitTerminationWithLong:(jlong)timeout
  withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task;

- (id<JavaUtilConcurrentFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task;

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task
                                                    withId:(id)result;

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                                           withLong:(jlong)timeout
                 withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                             withLong:(jlong)timeout
   withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentExecutors_DelegatedExecutorService_init() {}

@interface JavaUtilConcurrentExecutors_FinalizableDelegatedExecutorService : JavaUtilConcurrentExecutors_DelegatedExecutorService {
}

- (instancetype)initWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executor;

- (void)dealloc;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentExecutors_FinalizableDelegatedExecutorService_init() {}

@interface JavaUtilConcurrentExecutors_DelegatedScheduledExecutorService : JavaUtilConcurrentExecutors_DelegatedExecutorService < JavaUtilConcurrentScheduledExecutorService > {
}

- (instancetype)initWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)executor;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                             withLong:(jlong)delay
                                   withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                                                       withLong:(jlong)delay
                                             withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                        withLong:(jlong)initialDelay
                                                                        withLong:(jlong)period
                                              withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                           withLong:(jlong)initialDelay
                                                                           withLong:(jlong)delay
                                                 withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentExecutors_DelegatedScheduledExecutorService_init() {}

@interface JavaUtilConcurrentExecutors_$1 : NSObject < JavaUtilConcurrentCallable > {
}

- (id)call;

- (instancetype)initWithJavaSecurityPrivilegedAction:(id<JavaSecurityPrivilegedAction>)capture$0;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentExecutors_$1_init() {}

@interface JavaUtilConcurrentExecutors_$2 : NSObject < JavaUtilConcurrentCallable > {
}

- (id)call;

- (instancetype)initWithJavaSecurityPrivilegedExceptionAction:(id<JavaSecurityPrivilegedExceptionAction>)capture$0;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentExecutors_$2_init() {}

#endif // _JavaUtilConcurrentExecutors_H_

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.java
//

#ifndef _JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_H_
#define _JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_H_

@class JavaLangThread;
@class JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject;
@class JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node;
@class JavaUtilConcurrentTimeUnitEnum;
@class JavaUtilDate;
@class SunMiscUnsafe;
@protocol JavaUtilCollection;

#import "JreEmulation.h"
#include "java/io/Serializable.h"
#include "java/util/concurrent/locks/AbstractOwnableSynchronizer.h"
#include "java/util/concurrent/locks/Condition.h"

#define JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_serialVersionUID 7373984972572414692LL
#define JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_spinForTimeoutThreshold 1000LL

@interface JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer : JavaUtilConcurrentLocksAbstractOwnableSynchronizer < JavaIoSerializable > {
}

- (instancetype)init;

- (jlong)getState;

- (void)setStateWithLong:(jlong)newState;

- (jboolean)compareAndSetStateWithLong:(jlong)expect
                              withLong:(jlong)update;

+ (void)selfInterrupt;

- (jboolean)acquireQueuedWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)node
                                                                               withLong:(jlong)arg;

- (jboolean)tryAcquireWithLong:(jlong)arg;

- (jboolean)tryReleaseWithLong:(jlong)arg;

- (jlong)tryAcquireSharedWithLong:(jlong)arg;

- (jboolean)tryReleaseSharedWithLong:(jlong)arg;

- (jboolean)isHeldExclusively;

- (void)acquireWithLong:(jlong)arg;

- (void)acquireInterruptiblyWithLong:(jlong)arg;

- (jboolean)tryAcquireNanosWithLong:(jlong)arg
                           withLong:(jlong)nanosTimeout;

- (jboolean)release__WithLong:(jlong)arg;

- (void)acquireSharedWithLong:(jlong)arg;

- (void)acquireSharedInterruptiblyWithLong:(jlong)arg;

- (jboolean)tryAcquireSharedNanosWithLong:(jlong)arg
                                 withLong:(jlong)nanosTimeout;

- (jboolean)releaseSharedWithLong:(jlong)arg;

- (jboolean)hasQueuedThreads;

- (jboolean)hasContended;

- (JavaLangThread *)getFirstQueuedThread;

- (jboolean)isQueuedWithJavaLangThread:(JavaLangThread *)thread;

- (jboolean)apparentlyFirstQueuedIsExclusive;

- (jboolean)hasQueuedPredecessors;

- (jint)getQueueLength;

- (id<JavaUtilCollection>)getQueuedThreads;

- (id<JavaUtilCollection>)getExclusiveQueuedThreads;

- (id<JavaUtilCollection>)getSharedQueuedThreads;

- (NSString *)description;

- (jboolean)isOnSyncQueueWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)node;

- (jboolean)transferForSignalWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)node;

- (jboolean)transferAfterCancelledWaitWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)node;

- (jlong)fullyReleaseWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)node;

- (jboolean)ownsWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject *)condition;

- (jboolean)hasWaitersWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject *)condition;

- (jint)getWaitQueueLengthWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject *)condition;

- (id<JavaUtilCollection>)getWaitingThreadsWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject *)condition;

@end

FOUNDATION_EXPORT BOOL JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_initialized;
J2OBJC_STATIC_INIT(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer)
FOUNDATION_EXPORT void JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_selfInterrupt();

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer, serialVersionUID, jlong)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer, spinForTimeoutThreshold, jlong)

FOUNDATION_EXPORT SunMiscUnsafe *JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_unsafe_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer, unsafe_, SunMiscUnsafe *)

FOUNDATION_EXPORT jlong JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_stateOffset_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer, stateOffset_, jlong)

FOUNDATION_EXPORT jlong JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_headOffset_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer, headOffset_, jlong)

FOUNDATION_EXPORT jlong JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_tailOffset_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer, tailOffset_, jlong)

FOUNDATION_EXPORT jlong JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_waitStatusOffset_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer, waitStatusOffset_, jlong)

FOUNDATION_EXPORT jlong JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_nextOffset_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer, nextOffset_, jlong)

#define JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_CANCELLED 1
#define JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_CONDITION -2
#define JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_PROPAGATE -3
#define JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_SIGNAL -1

@interface JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node : NSObject {
 @public
  jint waitStatus_;
  JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *prev_;
  JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *next_;
  JavaLangThread *thread_;
  JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *nextWaiter_;
}

- (jboolean)isShared;

- (JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)predecessor;

- (instancetype)init;

- (instancetype)initWithJavaLangThread:(JavaLangThread *)thread
withJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)mode;

- (instancetype)initWithJavaLangThread:(JavaLangThread *)thread
                               withInt:(jint)waitStatus;

@end

FOUNDATION_EXPORT BOOL JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_initialized;
J2OBJC_STATIC_INIT(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, prev_, JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, next_, JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, thread_, JavaLangThread *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, nextWaiter_, JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)

FOUNDATION_EXPORT JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_SHARED_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, SHARED_, JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)

FOUNDATION_EXPORT JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node_EXCLUSIVE_;
J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, EXCLUSIVE_, JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node *)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, CANCELLED, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, SIGNAL, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, CONDITION, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_Node, PROPAGATE, jint)

#define JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject_REINTERRUPT 1
#define JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject_THROW_IE -1
#define JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject_serialVersionUID 1173984872572414699LL

@interface JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject : NSObject < JavaUtilConcurrentLocksCondition, JavaIoSerializable > {
}

- (instancetype)initWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer *)outer$;

- (void)signal;

- (void)signalAll;

- (void)awaitUninterruptibly;

- (void)await;

- (jlong)awaitNanosWithLong:(jlong)nanosTimeout;

- (jboolean)awaitUntilWithJavaUtilDate:(JavaUtilDate *)deadline;

- (jboolean)awaitWithLong:(jlong)time
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

- (jboolean)isOwnedByWithJavaUtilConcurrentLocksAbstractQueuedLongSynchronizer:(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer *)sync;

- (jboolean)hasWaiters;

- (jint)getWaitQueueLength;

- (id<JavaUtilCollection>)getWaitingThreads;

@end

__attribute__((always_inline)) inline void JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject_init() {}

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject, serialVersionUID, jlong)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject, REINTERRUPT, jint)

J2OBJC_STATIC_FIELD_GETTER(JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_ConditionObject, THROW_IE, jint)

#endif // _JavaUtilConcurrentLocksAbstractQueuedLongSynchronizer_H_

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/math/src/main/java/java/math/Logical.java
//

#ifndef _JavaMathLogical_H_
#define _JavaMathLogical_H_

@class JavaMathBigInteger;

#import "JreEmulation.h"

@interface JavaMathLogical : NSObject {
}

+ (JavaMathBigInteger *)not__WithJavaMathBigInteger:(JavaMathBigInteger *)val;

+ (JavaMathBigInteger *)and__WithJavaMathBigInteger:(JavaMathBigInteger *)val
                             withJavaMathBigInteger:(JavaMathBigInteger *)that;

+ (JavaMathBigInteger *)andPositiveWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                   withJavaMathBigInteger:(JavaMathBigInteger *)that;

+ (JavaMathBigInteger *)andDiffSignsWithJavaMathBigInteger:(JavaMathBigInteger *)positive
                                    withJavaMathBigInteger:(JavaMathBigInteger *)negative;

+ (JavaMathBigInteger *)andNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)longer
                                   withJavaMathBigInteger:(JavaMathBigInteger *)shorter;

+ (JavaMathBigInteger *)andNotWithJavaMathBigInteger:(JavaMathBigInteger *)val
                              withJavaMathBigInteger:(JavaMathBigInteger *)that;

+ (JavaMathBigInteger *)andNotPositiveWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                      withJavaMathBigInteger:(JavaMathBigInteger *)that;

+ (JavaMathBigInteger *)andNotPositiveNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)positive
                                              withJavaMathBigInteger:(JavaMathBigInteger *)negative;

+ (JavaMathBigInteger *)andNotNegativePositiveWithJavaMathBigInteger:(JavaMathBigInteger *)negative
                                              withJavaMathBigInteger:(JavaMathBigInteger *)positive;

+ (JavaMathBigInteger *)andNotNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                      withJavaMathBigInteger:(JavaMathBigInteger *)that;

+ (JavaMathBigInteger *)or__WithJavaMathBigInteger:(JavaMathBigInteger *)val
                            withJavaMathBigInteger:(JavaMathBigInteger *)that;

+ (JavaMathBigInteger *)orPositiveWithJavaMathBigInteger:(JavaMathBigInteger *)longer
                                  withJavaMathBigInteger:(JavaMathBigInteger *)shorter;

+ (JavaMathBigInteger *)orNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                  withJavaMathBigInteger:(JavaMathBigInteger *)that;

+ (JavaMathBigInteger *)orDiffSignsWithJavaMathBigInteger:(JavaMathBigInteger *)positive
                                   withJavaMathBigInteger:(JavaMathBigInteger *)negative;

+ (JavaMathBigInteger *)xor__WithJavaMathBigInteger:(JavaMathBigInteger *)val
                             withJavaMathBigInteger:(JavaMathBigInteger *)that;

+ (JavaMathBigInteger *)xorPositiveWithJavaMathBigInteger:(JavaMathBigInteger *)longer
                                   withJavaMathBigInteger:(JavaMathBigInteger *)shorter;

+ (JavaMathBigInteger *)xorNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                   withJavaMathBigInteger:(JavaMathBigInteger *)that;

+ (JavaMathBigInteger *)xorDiffSignsWithJavaMathBigInteger:(JavaMathBigInteger *)positive
                                    withJavaMathBigInteger:(JavaMathBigInteger *)negative;

@end

__attribute__((always_inline)) inline void JavaMathLogical_init() {}
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_not__WithJavaMathBigInteger_(JavaMathBigInteger *val);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_and__WithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andPositiveWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andDiffSignsWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *positive, JavaMathBigInteger *negative);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andNegativeWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *longer, JavaMathBigInteger *shorter);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andNotWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andNotPositiveWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andNotPositiveNegativeWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *positive, JavaMathBigInteger *negative);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andNotNegativePositiveWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *negative, JavaMathBigInteger *positive);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_andNotNegativeWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_or__WithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_orPositiveWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *longer, JavaMathBigInteger *shorter);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_orNegativeWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_orDiffSignsWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *positive, JavaMathBigInteger *negative);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_xor__WithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_xorPositiveWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *longer, JavaMathBigInteger *shorter);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_xorNegativeWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *val, JavaMathBigInteger *that);
FOUNDATION_EXPORT JavaMathBigInteger *JavaMathLogical_xorDiffSignsWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *positive, JavaMathBigInteger *negative);

#endif // _JavaMathLogical_H_

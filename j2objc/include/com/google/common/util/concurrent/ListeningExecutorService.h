//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kstanger/j2objc-0.9.5/j2objc/guava/sources/com/google/common/util/concurrent/ListeningExecutorService.java
//

#import "JreEmulation.h"

#if !ComGoogleCommonUtilConcurrentListeningExecutorService_RESTRICT
#define ComGoogleCommonUtilConcurrentListeningExecutorService_INCLUDE_ALL 1
#endif
#undef ComGoogleCommonUtilConcurrentListeningExecutorService_RESTRICT
#if !defined (_ComGoogleCommonUtilConcurrentListeningExecutorService_) && (ComGoogleCommonUtilConcurrentListeningExecutorService_INCLUDE_ALL || ComGoogleCommonUtilConcurrentListeningExecutorService_INCLUDE)
#define _ComGoogleCommonUtilConcurrentListeningExecutorService_

@class JavaUtilConcurrentTimeUnitEnum;
@protocol ComGoogleCommonUtilConcurrentListenableFuture;
@protocol JavaLangRunnable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilList;

#define JavaUtilConcurrentExecutorService_RESTRICT 1
#define JavaUtilConcurrentExecutorService_INCLUDE 1
#include "java/util/concurrent/ExecutorService.h"


@protocol ComGoogleCommonUtilConcurrentListeningExecutorService < JavaUtilConcurrentExecutorService, NSObject, JavaObject >
- (id<ComGoogleCommonUtilConcurrentListenableFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task;

- (id<ComGoogleCommonUtilConcurrentListenableFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task;

- (id<ComGoogleCommonUtilConcurrentListenableFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task
                                                                         withId:(id)result;

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                                           withLong:(jlong)timeout
                 withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;

@end

__attribute__((always_inline)) inline void ComGoogleCommonUtilConcurrentListeningExecutorService_init() {}
#endif

//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/json/src/main/java/org/json/JSONObject.java
//

#ifndef _OrgJsonJSONObject_H_
#define _OrgJsonJSONObject_H_

@class IOSObjectArray;
@class JavaLangDouble;
@class JavaUtilLinkedHashMap;
@class OrgJsonJSONArray;
@class OrgJsonJSONStringer;
@class OrgJsonJSONTokener;
@protocol JavaUtilIterator;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

#import "JreEmulation.h"

@interface OrgJsonJSONObject : NSObject {
}

- (instancetype)init;

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)copyFrom;

- (instancetype)initWithOrgJsonJSONTokener:(OrgJsonJSONTokener *)readFrom;

- (instancetype)initWithNSString:(NSString *)json;

- (instancetype)initWithOrgJsonJSONObject:(OrgJsonJSONObject *)copyFrom
                        withNSStringArray:(IOSObjectArray *)names;

- (jint)length;

- (OrgJsonJSONObject *)putWithNSString:(NSString *)name
                           withBoolean:(jboolean)value;

- (OrgJsonJSONObject *)putWithNSString:(NSString *)name
                            withDouble:(jdouble)value;

- (OrgJsonJSONObject *)putWithNSString:(NSString *)name
                               withInt:(jint)value;

- (OrgJsonJSONObject *)putWithNSString:(NSString *)name
                              withLong:(jlong)value;

- (OrgJsonJSONObject *)putWithNSString:(NSString *)name
                                withId:(id)value;

- (OrgJsonJSONObject *)putOptWithNSString:(NSString *)name
                                   withId:(id)value;

- (OrgJsonJSONObject *)accumulateWithNSString:(NSString *)name
                                       withId:(id)value;

- (OrgJsonJSONObject *)appendWithNSString:(NSString *)name
                                   withId:(id)value;

- (NSString *)checkNameWithNSString:(NSString *)name;

- (id)removeWithNSString:(NSString *)name;

- (jboolean)isNullWithNSString:(NSString *)name;

- (jboolean)hasWithNSString:(NSString *)name;

- (id)getWithNSString:(NSString *)name;

- (id)optWithNSString:(NSString *)name;

- (jboolean)getBooleanWithNSString:(NSString *)name;

- (jboolean)optBooleanWithNSString:(NSString *)name;

- (jboolean)optBooleanWithNSString:(NSString *)name
                       withBoolean:(jboolean)fallback;

- (jdouble)getDoubleWithNSString:(NSString *)name;

- (jdouble)optDoubleWithNSString:(NSString *)name;

- (jdouble)optDoubleWithNSString:(NSString *)name
                      withDouble:(jdouble)fallback;

- (jint)getIntWithNSString:(NSString *)name;

- (jint)optIntWithNSString:(NSString *)name;

- (jint)optIntWithNSString:(NSString *)name
                   withInt:(jint)fallback;

- (jlong)getLongWithNSString:(NSString *)name;

- (jlong)optLongWithNSString:(NSString *)name;

- (jlong)optLongWithNSString:(NSString *)name
                    withLong:(jlong)fallback;

- (NSString *)getStringWithNSString:(NSString *)name;

- (NSString *)optStringWithNSString:(NSString *)name;

- (NSString *)optStringWithNSString:(NSString *)name
                       withNSString:(NSString *)fallback;

- (OrgJsonJSONArray *)getJSONArrayWithNSString:(NSString *)name;

- (OrgJsonJSONArray *)optJSONArrayWithNSString:(NSString *)name;

- (OrgJsonJSONObject *)getJSONObjectWithNSString:(NSString *)name;

- (OrgJsonJSONObject *)optJSONObjectWithNSString:(NSString *)name;

- (OrgJsonJSONArray *)toJSONArrayWithOrgJsonJSONArray:(OrgJsonJSONArray *)names;

- (id<JavaUtilIterator>)keys;

- (id<JavaUtilSet>)keySet;

- (OrgJsonJSONArray *)names;

- (NSString *)description;

- (NSString *)toStringWithInt:(jint)indentSpaces;

- (void)writeToWithOrgJsonJSONStringer:(OrgJsonJSONStringer *)stringer;

+ (NSString *)numberToStringWithNSNumber:(NSNumber *)number;

+ (NSString *)quoteWithNSString:(NSString *)data;

+ (id)wrapWithId:(id)o;

@end

FOUNDATION_EXPORT BOOL OrgJsonJSONObject_initialized;
J2OBJC_STATIC_INIT(OrgJsonJSONObject)
FOUNDATION_EXPORT NSString *OrgJsonJSONObject_numberToStringWithNSNumber_(NSNumber *number);
FOUNDATION_EXPORT NSString *OrgJsonJSONObject_quoteWithNSString_(NSString *data);
FOUNDATION_EXPORT id OrgJsonJSONObject_wrapWithId_(id o);

FOUNDATION_EXPORT JavaLangDouble *OrgJsonJSONObject_NEGATIVE_ZERO_;
J2OBJC_STATIC_FIELD_GETTER(OrgJsonJSONObject, NEGATIVE_ZERO_, JavaLangDouble *)

FOUNDATION_EXPORT id OrgJsonJSONObject_NULL__;
J2OBJC_STATIC_FIELD_GETTER(OrgJsonJSONObject, NULL__, id)

@interface OrgJsonJSONObject_$1 : NSObject {
}

- (jboolean)isEqual:(id)o;

- (NSString *)description;

- (instancetype)init;

@end

__attribute__((always_inline)) inline void OrgJsonJSONObject_$1_init() {}

#endif // _OrgJsonJSONObject_H_
